[{"content":"My notes about how to Linux From Scratch (10.0 Stable)\nfor full doc:\nhttp://www.linuxfromscratch.org/lfs/read.html\nif video tutorial needed, here comes playlist made by Kernotex:\nhttps://youtube.com/playlist?list=PLyc5xVO2uDsD3DrDJB5LrTdCadiqr2HCp\n there\u0026rsquo;s a meme:\nand here\u0026rsquo;s how i did:\n1. download virtualbox and install it https://www.virtualbox.org/wiki/Downloads\n if you don\u0026rsquo;t know how to install and use, google it :-)\n 2. create host(arch) VM  because gentoo livecd currently not available and i don\u0026rsquo;t wanna use ubuntu as host\n Download Arch Linux LiveCD: https://archlinux.org/download/\nI use :\n10G .vdi image\nUEFI: ON\nfirst booting 1 type:\n$# timedatectl set-ntp true\t#NTP on $# cfdisk\t#tui partiton select gpt\nmy setup:\n/dev/sda1 512M for boot\n/dev/sda2 4G for host (will remove the host later)\nfree: 5.5G\n$# lsblk\t#for disk check $# mkfs.fat -F 32 /dev/sda1\t#make sda1 as FAT32 $# mkfs.ext4 /dev/sda2\t#make sda2 as ext4 $# mount /dev/sda2 /mnt\t#mount it as root $# mkdir -p /mnt/boot/efi\t#create efi boot folder $# mount /dev/sda1 /mnt/boot/efi\t#mount it as efi boot $# pacstrap /mnt base linux linux-firmware sudo grub efibootmgr networkmanager intel-ucode vim $# genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab $# arch-chroot /mnt in chroot:\n$# ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime $# hwclock --systohc $# vim /etc/locale.gen uncomment #en_US.UTF-8 UTF-8 by remove #\nthen :wq\n if dunno, google it :-)\n $# locale-gen $# echo \u0026#34;LANG=en_US.UTF-8\u0026#34; \u0026gt;\u0026gt; /etc/locale.conf $# systemctl enable NetworkManager $# useradd -m -G wheel -s /bin/bash host $# visudo uncomment # %wheel ALL=(ALL) ALL by remove #\nthen :wq\n$# passwd host\t#Set New Password $# grub-install /dev/sda $# grub-mkconfig -o /boot/grub/grub.cfg $# exit $# reboot second booting select Arch Linux\nthen login host\nand enter the password\n$ sudo pacman -Sy\t#to update packages $ sudo pacman -Syu\t#to upgrade packages to lastest ssh to virtualbox (optional but recommend)\n$ sudo pacman -S openssh $ systemctl start sshd\t#start server $ systemctl enable sshd\t#to start it when boot then go here to see how to configure VM network:\nhttps://dev.to/yassineselllami/how-to-ssh-into-ubuntu-vm-virtualbox-from-host-machine-1kii\n3. configure host to check the requires:\n$ curl -sL https://github.com/viktomas/linux-from-scratch/raw/master/version-check.sh | bash For LFS 10.0 install require packages:\n$ sudo pacman -S bash binutils bison bzip2 coreutils diffutils findutils gawk gcc glibc grep gzip linux to reboot and apply latest kernel:\n$ sudo grub-mkconfig -o /boot/grub/grub.cfg $ sudo reboot after reboot change to root:\n$ sudo su type:\n$# cfdisk\t#tui partiton use left space (5.5G)\nto set new partition as /dev/sda3 (LFS root)\nthen format as ext4:\n$# mkfs -v -t ext4 /dev/sda3\t#make sda3 as ext4 Set $LFS:\n$# export LFS=/mnt/lfs  $# echo $LFS\t#to check export  $# mkdir -pv $LFS\t#make $LFS folder $# mount -v -t ext4 /dev/sda3 $LFS\t#mount sda3 to $LFS  to prevent unmount when reboot, halt; add your LFS partition to /etc/fstab, for example:\nadd\n/dev/\u0026lt;xxx\u0026gt;\t/mnt/lfs ext4\tdefaults\t1\t1  $# mkdir -v $LFS/sources\t#make folder for sources $# chmod -v a+wt $LFS/sources\t#to add write permission and sticky mark Download needed source packages and patches 2 First install wget:\n$# pacman -S wget\t#in root # or $ sudo pacman -S wget\t#for sudo user There are several ways to optain all the necessary packages and patches to build LFS:\n  The files can be downloaded individually as described in the next two sections.\n  For stable versions of the book, a tarball of all the needed files can be downloaded from one of the LFS files mirrors listed at http://www.linuxfromscratch.org/mirrors.html#files.\n  The files can be downloaded using wget and a wget-list as described below.\nTo download all of the packages and patches by using wget-list as an input to the wget command, use:\n  $# wget http://www.linuxfromscratch.org/lfs/view/stable/wget-list\t#download stable wget-list $# wget --input-file=wget-list --continue --directory-prefix=$LFS/sources\t#download packages using wget-list  To check packages or download them manually:\nhttp://www.linuxfromscratch.org/lfs/view/stable/chapter03/packages.html\nManually download patches:\nhttp://www.linuxfromscratch.org/lfs/view/stable/chapter03/patches.html\n Total size of these packages: about 411 MB\nFinal Preparations 3 Create the required directory layout:\n$# mkdir -pv $LFS/{bin,etc,lib,sbin,usr,var} $# case $(uname -m) in \u0026gt; x86_64) mkdir -pv $LFS/lib64 ;; \u0026gt; esac In order to separate this cross-compiler from the other programs, it will be installed in a special directory. Create this directory with:\n$# mkdir -pv $LFS/tools Create new group and user:\n$# groupadd lfs $# useradd -s /bin/bash -g lfs -m -k /dev/null lfs the user and the group both called lfs\nyou can change lfs to your desired name\n Remind:\n-m : This creates a home directory for lfs.\n-k /dev/null : This parameter prevents possible copying of files from a skeleton directory (default is /etc/skel) by changing the input location to the special null device.\n $# passwd lfs\t#Set New Password Grant lfs full access to all directories under $LFS by making lfs the directory owner:\n$# chown -v lfs $LFS/{usr,lib,var,etc,bin,sbin,tools} $# case $(uname -m) in \u0026gt; x86_64) chown -v lfs $LFS/lib64 ;; \u0026gt; esac If a separate working directory was created as suggested, give user lfs ownership of this directory:\n$# chown -v lfs $LFS/sources Next, login as user lfs. This can be done via a virtual console, through a display manager, or with the following substitute/switch user command:\n$# su - lfs The “-” instructs su to start a login shell as opposed to a non-login shell. The difference between these two types of shells can be found in detail in bash(1) and info bash.\nSet up a good working environment by creating two new startup files for the bash shell. While logged in as user lfs, issue the following command to create a new .bash_profile:\n$ cat \u0026gt; ~/.bash_profile \u0026lt;\u0026lt; \u0026#34;EOF\u0026#34; \u0026gt; exec env -i HOME=$HOME TERM=$TERM PS1=\u0026#39;\\u:\\w\\$ \u0026#39; /bin/bash \u0026gt; EOF When logged on as user lfs, the initial shell is usually a login shell which reads the /etc/profile of the host (probably containing some settings and environment variables) and then .bash_profile. The exec env -i\u0026hellip;/bin/bash command in the .bash_profile file replaces the running shell with a new one with a completely empty environment, except for the HOME, TERM, and PS1 variables. This ensures that no unwanted and potentially hazardous environment variables from the host system leak into the build environment. The technique used here achieves the goal of ensuring a clean environment.\nThe new instance of the shell is a non-login shell, which does not read, and execute, the contents of /etc/profile or .bash_profile files, but rather reads, and executes, the .bashrc file instead. Create the .bashrc file now:\n$ vim .bashrc paste it:\ncat \u0026gt; ~/.bashrc \u0026lt;\u0026lt; \u0026#34;EOF\u0026#34; set +h umask 022 LFS=/mnt/lfs LC_ALL=POSIX LFS_TGT=$(uname -m)-lfs-linux-gnu PATH=/usr/bin if [ ! -L /bin ]; then PATH=/bin:$PATH; fi PATH=$LFS/tools/bin:$PATH export LFS LC_ALL LFS_TGT PATH EOF then :wq\n Remind:\n  set +h\nThe set +h command turns off bash\u0026rsquo;s hash function. Hashing is ordinarily a useful feature—bash uses a hash table to remember the full path of executable files to avoid searching the PATH time and again to find the same executable. However, the new tools should be used as soon as they are installed. By switching off the hash function, the shell will always search the PATH when a program is to be run. As such, the shell will find the newly compiled tools in $LFS/tools as soon as they are available without remembering a previous version of the same program in a different location.\n  LC_ALL=POSIX\nThe LC_ALL variable controls the localization of certain programs, making their messages follow the conventions of a specified country. Setting LC_ALL to “POSIX” or “C” (the two are equivalent) ensures that everything will work as expected in the chroot environment.\n  LFS_TGT=(uname -m)-lfs-linux-gnu\nThe LFS_TGT variable sets a non-default, but compatible machine description for use when building our cross compiler and linker and when cross compiling our temporary toolchain. More information is contained in Toolchain Technical Notes.\n  PATH=/usr/bin\nMany modern linux distributions have merged /bin and /usr/bin. When this is the case, the standard PATH variable needs just to be set to /usr/bin/ for the Chapter 6 environment. When this is not the case, the following line adds /bin to the path.\n  if [ ! -L /bin ]; then PATH=/bin:$PATH; fi\nIf /bin is not a symbolic link, then it has to be added to the PATH variable.\n  PATH=$LFS/tools/bin:$PATH\nBy putting $LFS/tools/bin ahead of the standard PATH, the cross-compiler installed at the beginning of Chapter 5 is picked up by the shell immediately after its installation. This, combined with turning off hashing, limits the risk that the compiler from the host be used instead of the cross-compiler.\n  export LFS LC_ALL LFS_TGT PATH\n  While the above commands have set some variables, in order to make them visible within any sub-shells, we export them.\n  Important Several commercial distributions add a non-documented instantiation of /etc/bash.bashrc to the initialization of bash. This file has the potential to modify the lfs user\u0026rsquo;s environment in ways that can affect the building of critical LFS packages. To make sure the lfs user\u0026rsquo;s environment is clean, check for the presence of /etc/bash.bashrc and, if present, move it out of the way.\nDo:\n$# [ ! -e /etc/bash.bashrc ] || mv -v /etc/bash.bashrc /etc/bash.bashrc.NOUSE\t#root user # or $ [ ! -e /etc/bash.bashrc ] || sudo mv -v /etc/bash.bashrc /etc/bash.bashrc.NOUSE\t#using sudo (wheel or sudo group required) After use of the lfs user is finished at the beginning of Chapter 7, you can restore /etc/bash.bashrc (if desired).\nNote that the LFS Bash package we will build in Section 8.34, “Bash-5.0” is not configured to load or execute /etc/bash.bashrc, so this file is useless on a completed LFS system.\n Finally, to have the environment fully prepared for building the temporary tools, source the just-created user profile:\n$ source ~/.bash_profile 4. building the LFS cross toolchain and temporary tools 4  Important The build instructions assume that the Host System Requirements, including symbolic links, have been set properly:\n bash is the shell in use. sh is a symbolic link to bash. /usr/bin/awk is a symbolic link to gawk. /usr/bin/yacc is a symbolic link to bison or a small script that executes bison.  Important To re-emphasize the build process:\n Place all the sources and patches in a directory that will be accessible from the chroot environment such as /mnt/lfs/sources. Change to the sources directory. For each package:  Using the tar program, extract the package to be built. In Chapter 5 and Chapter 6, ensure you are the lfs user when extracting the package. Change to the directory created when the package was extracted. Follow the book\u0026rsquo;s instructions for building the package. Change back to the sources directory. Delete the extracted source directory unless instructed otherwise.     [WIP]\nroot user:\n$# pacman -S make\n$# cd $LFS/sources\n$# chmod u-w *\n$# su - lfs\n$ cd $LFS/sources\n$ tar -xvf binutils-2.35.tar.xz\n$ cd binutils-2.35\ngoo\n$ cd ../..\n$ rm -rf binutils-2.35\t#to clean package tar\n$ tar -xvf gcc-10.2.0.tar.xz\n$ cd gcc-10.2.0\ngoo\n64-Bit 2CPU 2GB RAM to compile\ni dont use swap partition but i use swapfile with automatic\npacman -S systemd-swap\nsystemctl enable systemd-swap\nUncomment and set swapfc_enabled=1 in the Swap File Chunked section of /etc/systemd/swap.conf.\necho \u0026ldquo;swapfc_enabled=1\u0026rdquo; \u0026raquo; /etc/systemd/swap.conf\nsystemctl start systemd-swap\nnice low priority flag with make -j -l flag recommend\ni use nice -n 1 make -j4\nnice -n 1 make install\ncd .. cat gcc/limitx.h gcc/glimits.h gcc/limity.h \u0026gt; \\ `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/install-tools/include/limits.h cd ..\nrm -rf gcc-10.2.0\ngoo\nPS1: Updates:   refer: https://www.youtube.com/watch?v=Ctp-5MRgxGA \u0026#x21a9;\u0026#xfe0e;\n refer: http://www.linuxfromscratch.org/lfs/view/stable/chapter03/introduction.html (LFS 10.0 Stable) \u0026#x21a9;\u0026#xfe0e;\n refer: http://www.linuxfromscratch.org/lfs/view/stable/chapter04/chapter04.html \u0026#x21a9;\u0026#xfe0e;\n refer: http://www.linuxfromscratch.org/lfs/view/stable/part3.html \u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://amirvincent64.github.io/en/posts/notes-10.0-linux-from-scratch/","summary":"\u003cp\u003eMy notes about how to Linux From Scratch (10.0 Stable)\u003c/p\u003e","title":"Linux From Scratch 10.0 Notes [WIP]"},{"content":"wowowowowowowow OwO\n","permalink":"https://amirvincent64.github.io/en/posts/2021-02-07-wow-gentoo/","summary":"\u003cp\u003e\u003cem\u003ewowowowowowowow OwO\u003c/em\u003e\u003c/p\u003e","title":"WOW! Gentoo!"},{"content":"Record the experience and experience of going to the 2021 Taipei International Animation Festival\n Translated by Google, original post here: Original  1 In the morning, my friend and I met at a breakfast shop. After having breakfast, we went out through the MRT gate and saw a crowd of people surrounding the entire venue. . We walked by the man-made wall and asked a person who was standing in line about the direction of the line. At this moment, it was almost ten o\u0026rsquo;clock in the morning, and we were guided to wait in line outside the main entrance (area 13-D). On the stalled team, friends sat down together, one of them was chasing \u0026ldquo;Goblin Slayer\u0026rdquo;, the others were playing games. During this period, I saw students ordering Foodpanda, workers eating lunch on another shelter, and some cos \u0026ldquo;Re: Life in a Different World from Zero\u0026rdquo; Rem and \u0026ldquo;Wolf Game\u0026rdquo; Iida Rentaro. It took about half an hour before someone gradually moved, and my friends began to prepare to order McDonald\u0026rsquo;s. This is the scene at the time:\n Are there too many people! ! !\n  2 (About an hour later)\nAt that time, I thought that the entrance was the venue, and when I entered:\n You have to row inside! ! !\n Not only that, but the number of people on the second floor gradually increased.\n (There are too many kapok rows, right)\n  3 (After queuing for nearly four hours)\nFinally arrived at the venue. The first thing we entered was not to grab the lucky bag immediately, but to walk around the whole venue first. These were taken while shopping:\n One Piece\n  Compared with Good Smile!\n  Lots of people\n  Hanako-kun! ! ! Hui Ye! ! !\n  I also saw a big drawing board, but unfortunately I didn’t get it\nOf course there must be ghosts, hatsune, JOJO, guinea pigs\nChildren only watch the Blade of Ghost Slayer, adults watch Guinea Pigs\n  4 I walked the whole venue and sat by the wall with my friends. I looked at them for a while and wanted to say why I went to Kapok to buy a slime bag before I started buying a lucky bag. When I came back and waited until my friend started to act, a friend who wanted to buy Pikachu went to the Mandy store first, and then went to the gashapon store, who had better luck. Then we worked in groups, one group went to Kapok, another group went to Good Smile, and I went to Lingbang. When I arrived outside the Lingbang store, I found that the queue was full\u0026hellip;\n My spell is back to the flash drive\n I sat with two friends outside the second gate, waiting for everyone to arrive. In about a few minutes, let them tell us to eat first and go to a restaurant that two people think is not bad:\n This is the invoice and easy tap\n  Miso Ramen\n  Also Miso Ramen\n When they returned to the second door, they had already bought McDonald\u0026rsquo;s and animation merchandise. So after eating McDonald\u0026rsquo;s there, I went to Taipei Station to order a drink, and then walked away.\n End This is the above notes and experience!\n","permalink":"https://amirvincent64.github.io/en/posts/2021-02-05-notes-taipei-international-comics-and-animation-festival/","summary":"\u003cp\u003e\u003cem\u003eRecord the experience and experience of going to the 2021 Taipei International Animation Festival\u003c/em\u003e\u003c/p\u003e","title":"2021 Taipei International Animation Festival-Notes"},{"content":"A tutorial about how to install and deploy your Hugo site on Github Pages\nInstall Hugo \u0026lsquo;1\u0026rsquo;  Homebrew and MacPorts, package managers for macOS, can be installed from brew.sh or macports.org respectively. See install if you are running Windows etc.\n brew install hugo # or port install hugo To verify your new install:\nhugo version Git  (Recommend for Hugo)\n Install Git Check the git if installed:\ngit --version If you’ve installed it, it shows your version of git, if not, it will prompt you to install it automatically.\nSet Git Repo There\u0026rsquo;s two ways to set:\nInit Git Repo cd `Site_Location` git init Site_Location is the location you want to place the site folder at\nClone Existing Repo cd `Site_Location` git clone `Git_Repo` Site_Location is the location you want to place the site folder at\nOptional: Push to Github Build Site Create Run the command in terminal:\ncd `Site_Location` hugo new site `Site_Name` Site_Location is the location you want to place the site folder at\nSite_Name is a site name for example\nAften then, change to the site directory:\ncd `Site_Name` Install Theme In your site directory, run the command in terminal:\ncd themes git clone `Theme_Git_URL` change the Theme_Git_URL to the URL of the theme you want to install\nAfter that, go back to site\u0026rsquo;s root directory by  cd ../\nand add the theme to the site configuration:\n Choose either one\nIf you don\u0026rsquo;t know, just output to the toml format unless you or the theme needs to use yml/yaml\n echo \u0026#39;theme = \u0026#34;`Theme_Name`\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml # to config.toml echo \u0026#39;theme = \u0026#34;`Theme_Name`\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.yml # to config.yml Alternative In your site directory, Download the Theme_Name theme using git submodule:\ngit submodule add `Theme_Git_URL` themes/`Theme_Name`  Note for non-git users: \u0026lsquo;1\u0026rsquo;\n If you do not have git installed, you can download the archive of the latest version of this theme from: https://github.com/budparr/gohugo-theme-ananke/archive/master.zip Extract that .zip file to get a “gohugo-theme-ananke-master” directory. Rename that directory to “ananke”, and move it into the “themes/” directory.   Config Compile To compile the site:\nhugo Yeah, that\u0026rsquo;s it.\n But if you have a theme, just add -t Theme_Name option\nhugo -t `Theme_Name`  Run as Server \u0026lsquo;1\u0026rsquo; Start the Hugo server:\nhugo server\rStart the Hugo server with drafts enabled:\nhugo server -D\rIt will show the output:\n | EN\r+------------------+----+\rPages | 10\rPaginator pages | 0\rNon-page files | 0\rStatic files | 3\rProcessed images | 0\rAliases | 1\rSitemaps | 1\rCleaned | 0\rTotal in 11 ms\rWatching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes}\rWatching for config changes in /Users/bep/quickstart/config.toml\rEnvironment: \u0026quot;development\u0026quot;\rServing pages from memory\rRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop\rNavigate to your new site at http://localhost:1313/.\nFeel free to edit or add new content and simply refresh in browser to see changes quickly (You might need to force refresh in webbrowser, something like Ctrl-R usually works).\nFinish And now you have finished to build your site. 😻\nAdd Post \u0026lsquo;1\u0026rsquo; You can manually create content files (for example as content/\u0026lt;CATEGORY\u0026gt;/\u0026lt;FILE\u0026gt;.\u0026lt;FORMAT\u0026gt;) and provide metadata in them, however you can use the new command to do a few things for you (like add title and date):\nhugo new posts/my-first-post.md\rEdit the newly created content file if you want, it will start with something like this:\n--- title: \u0026#34;My First Post\u0026#34; date: 2019-03-26T08:47:11+01:00 draft: true ---  Drafts do not get deployed; once you finish a post, update the header of the post to say draft: false. More info here.\n Deploy another Git Repo for Public (github.io) New Git Repo Clone github.io Repo Compile Push to github.io Repo PS: Automatic Update Script End That\u0026rsquo;s all for the tutorial, happy blogging~~~\nFor more information about Hugo or Github Pages, you can go to these both official sites:\nhttps://gohugo.io/\nhttps://pages.github.com/\n  from: https://gohugo.io/getting-started/quick-start/ \u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://amirvincent64.github.io/en/posts/2021-02-03-run-hugo-on-github/","summary":"\u003cp\u003eA tutorial about how to install and deploy your Hugo site on Github Pages\u003c/p\u003e","title":"Build Website on Github by Hugo (WIP)"},{"content":"","permalink":"https://amirvincent64.github.io/en/posts/blank/","summary":"","title":"Blank"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist  List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://amirvincent64.github.io/en/projects/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":" a Student having interests in OS, Information Science, Sociology ; loves Command Line, FOSS, Freedom.\n Skills used:\n Python3 C HTML Node.js | NPM MariaDB | MySQL | Portage | SQL Docker JSON | XML Git | Repo RaspberryPi Hugo | Markdown | HackMD Scripting | Bash Minecraft Server  Tools used:\n Gentoo | Arch | etc Vi(m) | VSCode VirtualBox | VMWare BurpSuite Nmap WireShark   Contact Me Email Feel free to contact to me at :-)\necho YW1pcnZpbmNlbnQ2NEB5YWhvby5jb20K | base64 -d ","permalink":"https://amirvincent64.github.io/en/about/","summary":"a Student having interests in OS, Information Science, Sociology ; loves Command Line, FOSS, Freedom.\n Skills used:\n Python3 C HTML Node.js | NPM MariaDB | MySQL | Portage | SQL Docker JSON | XML Git | Repo RaspberryPi Hugo | Markdown | HackMD Scripting | Bash Minecraft Server  Tools used:\n Gentoo | Arch | etc Vi(m) | VSCode VirtualBox | VMWare BurpSuite Nmap WireShark   Contact Me Email Feel free to contact to me at :-)","title":"About"}]