[{"content":"My notes about how to Linux From Scratch (10.1 Stable)\nfor full doc:\nhttp://www.linuxfromscratch.org/lfs/read.html\nif video tutorial needed, here comes playlist made by Kernotex:\nhttps://youtube.com/playlist?list=PLyc5xVO2uDsAlIkKBIGauDQ6LejoQovyL\n there\u0026rsquo;s a meme:\nand here\u0026rsquo;s how i did:\n1. download virtualbox and install it https://www.virtualbox.org/wiki/Downloads\n if you don\u0026rsquo;t know how to install and use, google it :-)\n 2. create host(ubuntu) VM Download Ubuntu Server LiveCD: https://ubuntu.com/download/server\nManual server installation -\u0026gt; Download Ubuntu Server LTS\nI use :\n32G .vdi image\nUEFI: ON\nchoose manual partition\nmy setup:\n/dev/sda1 512M vfat for /boot/efi\n/dev/sda2 488M ext4 for /boot/\n/dev/sda3 4G ext4 for ubuntu host\n/dev/sda4 26G ext4 for LFS root\n/dev/sda5 1G ext4 for LFS backup\nsecond booting select Ubuntu\nthen login\nand enter the password\n$ sudo apt full-upgrade\t#to update packages and upgrade packages to lastest ssh to virtualbox (optional but recommend, if still not installed)\n$ sudo apt install openssh $ systemctl start sshd\t#start server $ systemctl enable sshd\t#to start it when boot then go here to see how to configure VM network:\nhttps://dev.to/yassineselllami/how-to-ssh-into-ubuntu-vm-virtualbox-from-host-machine-1kii\n3. configure host to check the requires:\n$ curl -sL https://github.com/viktomas/linux-from-scratch/raw/master/version-check.sh | bash sudo su - ln -svf /usr/bin/bash /bin/sh For LFS 10.1 install require packages:\nsudo apt install binutils bison gawk gcc g++ make texinfo build-essential sudo su - Set $LFS:\n$# export LFS=/mnt/lfs  $# echo $LFS\t#to check export  $# mkdir -pv $LFS\t#make $LFS folder $# mount -v -t ext4 /dev/sda4 $LFS\t#mount sda4 to $LFS $# mkdir -pv /mnt/lfsbackup\t#make /mnt/lfsbackup folder $# mount -v -t ext4 /dev/sda5 /mnt/lfsbackup\t#mount sda5 to /mnt/lfsbackup  to prevent unmount when reboot, halt; add your LFS partition to /etc/fstab, for example:\nadd\n/dev/\u0026lt;xxx\u0026gt;\t/mnt/lfs ext4\tdefaults\t1\t1  $# mkdir -v $LFS/sources\t#make folder for sources $# chmod -v a+wt $LFS/sources\t#to add write permission and sticky mark Download needed source packages and patches 1 First install wget if not installed:\nsudo apt install wget There are several ways to optain all the necessary packages and patches to build LFS:\n  The files can be downloaded individually as described in the next two sections.\n  For stable versions of the book, a tarball of all the needed files can be downloaded from one of the LFS files mirrors listed at http://www.linuxfromscratch.org/mirrors.html#files.\n  The files can be downloaded using wget and a wget-list as described below.\nTo download all of the packages and patches by using wget-list as an input to the wget command, use:\n  $# wget http://www.linuxfromscratch.org/lfs/view/stable/wget-list\t#download stable wget-list $# wget --input-file=wget-list --continue --directory-prefix=$LFS/sources\t#download packages using wget-list  To check packages or download them manually:\nhttp://www.linuxfromscratch.org/lfs/view/stable/chapter03/packages.html\nManually download patches:\nhttp://www.linuxfromscratch.org/lfs/view/stable/chapter03/patches.html\n Total size of these packages: about 418 MB\nFinal Preparations 2 Create the required directory layout:\n$# mkdir -pv $LFS/{bin,etc,lib,sbin,usr,var} $# case $(uname -m) in \u0026gt; x86_64) mkdir -pv $LFS/lib64 ;; \u0026gt; esac In order to separate this cross-compiler from the other programs, it will be installed in a special directory. Create this directory with:\n$# mkdir -pv $LFS/tools Create new group and user:\n$# groupadd lfs $# useradd -s /bin/bash -g lfs -m -k /dev/null lfs the user and the group both called lfs\nyou can change lfs to your desired name\n Remind:\n-m : This creates a home directory for lfs.\n-k /dev/null : This parameter prevents possible copying of files from a skeleton directory (default is /etc/skel) by changing the input location to the special null device.\n $# passwd lfs\t#Set New Password Grant lfs full access to all directories under $LFS by making lfs the directory owner:\n$# chown -v lfs $LFS/{usr,lib,var,etc,bin,sbin,tools} $# case $(uname -m) in \u0026gt; x86_64) chown -v lfs $LFS/lib64 ;; \u0026gt; esac If a separate working directory was created as suggested, give user lfs ownership of this directory:\n$# chown -v lfs $LFS/sources Next, login as user lfs. This can be done via a virtual console, through a display manager, or with the following substitute/switch user command:\n$# su - lfs The “-” instructs su to start a login shell as opposed to a non-login shell. The difference between these two types of shells can be found in detail in bash(1) and info bash.\nSet up a good working environment by creating two new startup files for the bash shell. While logged in as user lfs, issue the following command to create a new .bash_profile:\n$ cat \u0026gt; ~/.bash_profile \u0026lt;\u0026lt; \u0026#34;EOF\u0026#34; \u0026gt; exec env -i HOME=$HOME TERM=$TERM PS1=\u0026#39;\\u:\\w\\$ \u0026#39; /bin/bash \u0026gt; EOF When logged on as user lfs, the initial shell is usually a login shell which reads the /etc/profile of the host (probably containing some settings and environment variables) and then .bash_profile. The exec env -i\u0026hellip;/bin/bash command in the .bash_profile file replaces the running shell with a new one with a completely empty environment, except for the HOME, TERM, and PS1 variables. This ensures that no unwanted and potentially hazardous environment variables from the host system leak into the build environment. The technique used here achieves the goal of ensuring a clean environment.\nThe new instance of the shell is a non-login shell, which does not read, and execute, the contents of /etc/profile or .bash_profile files, but rather reads, and executes, the .bashrc file instead. Create the .bashrc file now:\n$ vim .bashrc paste it:\ncat \u0026gt; ~/.bashrc \u0026lt;\u0026lt; \u0026#34;EOF\u0026#34; set +h umask 022 LFS=/mnt/lfs LC_ALL=POSIX LFS_TGT=$(uname -m)-lfs-linux-gnu PATH=/usr/bin if [ ! -L /bin ]; then PATH=/bin:$PATH; fi PATH=$LFS/tools/bin:$PATH export LFS LC_ALL LFS_TGT PATH EOF then :wq\necho \u0026quot;export MAKEFLAGS='-j4'\u0026quot; \u0026gt;\u0026gt; ~/.bashrc  Remind:\n  set +h\nThe set +h command turns off bash\u0026rsquo;s hash function. Hashing is ordinarily a useful feature—bash uses a hash table to remember the full path of executable files to avoid searching the PATH time and again to find the same executable. However, the new tools should be used as soon as they are installed. By switching off the hash function, the shell will always search the PATH when a program is to be run. As such, the shell will find the newly compiled tools in $LFS/tools as soon as they are available without remembering a previous version of the same program in a different location.\n  LC_ALL=POSIX\nThe LC_ALL variable controls the localization of certain programs, making their messages follow the conventions of a specified country. Setting LC_ALL to “POSIX” or “C” (the two are equivalent) ensures that everything will work as expected in the chroot environment.\n  LFS_TGT=(uname -m)-lfs-linux-gnu\nThe LFS_TGT variable sets a non-default, but compatible machine description for use when building our cross compiler and linker and when cross compiling our temporary toolchain. More information is contained in Toolchain Technical Notes.\n  PATH=/usr/bin\nMany modern linux distributions have merged /bin and /usr/bin. When this is the case, the standard PATH variable needs just to be set to /usr/bin/ for the Chapter 6 environment. When this is not the case, the following line adds /bin to the path.\n  if [ ! -L /bin ]; then PATH=/bin:$PATH; fi\nIf /bin is not a symbolic link, then it has to be added to the PATH variable.\n  PATH=$LFS/tools/bin:$PATH\nBy putting $LFS/tools/bin ahead of the standard PATH, the cross-compiler installed at the beginning of Chapter 5 is picked up by the shell immediately after its installation. This, combined with turning off hashing, limits the risk that the compiler from the host be used instead of the cross-compiler.\n  export LFS LC_ALL LFS_TGT PATH\n  While the above commands have set some variables, in order to make them visible within any sub-shells, we export them.\n  Important Several commercial distributions add a non-documented instantiation of /etc/bash.bashrc to the initialization of bash. This file has the potential to modify the lfs user\u0026rsquo;s environment in ways that can affect the building of critical LFS packages. To make sure the lfs user\u0026rsquo;s environment is clean, check for the presence of /etc/bash.bashrc and, if present, move it out of the way.\nDo:\n$# [ ! -e /etc/bash.bashrc ] || mv -v /etc/bash.bashrc /etc/bash.bashrc.NOUSE\t#root user # or $ [ ! -e /etc/bash.bashrc ] || sudo mv -v /etc/bash.bashrc /etc/bash.bashrc.NOUSE\t#using sudo (wheel or sudo group required) After use of the lfs user is finished at the beginning of Chapter 7, you can restore /etc/bash.bashrc (if desired).\nNote that the LFS Bash package we will build in Section 8.34, “Bash-5.0” is not configured to load or execute /etc/bash.bashrc, so this file is useless on a completed LFS system.\n Finally, to have the environment fully prepared for building the temporary tools, source the just-created user profile:\n$ source ~/.bash_profile 4. building the LFS cross toolchain and temporary tools 3  Important The build instructions assume that the Host System Requirements, including symbolic links, have been set properly:\n bash is the shell in use. sh is a symbolic link to bash. /usr/bin/awk is a symbolic link to gawk. /usr/bin/yacc is a symbolic link to bison or a small script that executes bison.  Important To re-emphasize the build process:\n Place all the sources and patches in a directory that will be accessible from the chroot environment such as /mnt/lfs/sources. Change to the sources directory. For each package:  Using the tar program, extract the package to be built. In Chapter 5 and Chapter 6, ensure you are the lfs user when extracting the package. Change to the directory created when the package was extracted. Follow the book\u0026rsquo;s instructions for building the package. Change back to the sources directory. Delete the extracted source directory unless instructed otherwise.     [Alpha] the LFS cross toolchain root user:\n$# apt install make patch build-essential cpio\n$# cd $LFS/sources\n$# chmod u-w *\n$# su - lfs\n$ cd $LFS/sources\n$ tar -xvf binutils-2.36.1.tar.xz\n$ cd binutils-2.36.1\ngoo\n$ cd ../..\n$ rm -rf binutils-2.36.1\t#to clean package tar\n$ tar -xvf gcc-10.2.0.tar.xz\n$ cd gcc-10.2.0\ngoo\n64-Bit 2CPU 2GB RAM to compile\ni dont use swap partition but i use swapfile with automatic\n refer: https://github.com/Nefelim4ag/systemd-swap\n git clone https://github.com/Nefelim4ag/systemd-swap.git cd systemd-swap make deb sudo apt install ./systemd-swap_*_all.deb systemctl enable systemd-swap\nUncomment and set swapfc_enabled=1 in the Swap File Chunked section of /etc/systemd/swap.conf.\necho \u0026ldquo;swapfc_enabled=1\u0026rdquo; \u0026raquo; /etc/systemd/swap.conf\nsystemctl start systemd-swap\nnice low priority flag with make -j -l flag recommend\ni use nice -n 1 make -j4 -l2\nnice -n 1 make install\ncd .. cat gcc/limitx.h gcc/glimits.h gcc/limity.h \u0026gt; \\ `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/install-tools/include/limits.h cd ..\nrm -rf gcc-10.2.0\ntar -xvf linux-5.10.17.tar.xz\ncd linux-5.10.17\ngoo\ncd ..\nrm -rf linux-5.10.17\ntar -xvf glibc-2.33.tar.xz\ncd glibc-2.33\ngoo\ni use nice -n 1 make -j4 -l2\nnice -n 1 make DESTDIR=$LFS install\necho \u0026#39;int main(){}\u0026#39; \u0026gt; dummy.c $LFS_TGT-gcc dummy.c readelf -l a.out | grep \u0026#39;/ld-linux\u0026#39; # [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2] # For 32bit: /lib/ld-linux.so.2 rm -v dummy.c a.out $LFS/tools/libexec/gcc/$LFS_TGT/10.2.0/install-tools/mkheaders\ncd ../..\nrm -rf glibc-2.33\ntar -xvf gcc-10.2.0.tar.xz\ncd gcc-10.2.0\ngoo\ni use nice -n 1 make -j4 -l2\nnice -n 1 make DESTDIR=$LFS install\ncd ../..\nrm -rf gcc-10.2.0\ntemporary tools  Remind:\nUntar, cd to it, following description and remove the finished package folders\nJust do above way as loop until binutils or gcc comming\n tar -xvf m4-1.4.18.tar.xz\ncd m4-1.4.18\ngoo\ncd ..\nrm -rf m4-1.4.18\ntar -xvf ncurses-6.2.tar.gz\ncd ncurses-6.2\ngoo\ncd ..\nrm -rf ncurses-6.2\ntar -xvf bash-5.1.tar.gz\ncd bash-5.1\ngoo\ncd ..\nrm -rf bash-5.1\ntar -xvf coreutils-8.32.tar.xz\ncd coreutils-8.32\ngoo\ncd ..\nrm -rf coreutils-8.32\ntar -xvf diffutils-3.7.tar.xz\ncd diffutils-3.7\ngoo\ncd ..\nrm -rf diffutils-3.7\ntar -xvf file-5.39.tar.gz\ncd file-5.39\ngoo\ncd ..\nrm -rf file-5.39\ntar -xvf findutils-4.8.0.tar.xz\ncd findutils-4.8.0\ngoo\ncd ..\nrm -rf findutils-4.8.0\ntar -xvf gawk-5.1.0.tar.xz\ncd gawk-5.1.0\ngoo\ncd ..\nrm -rf gawk-5.1.0\ntar -xvf grep-3.6.tar.xz\ncd grep-3.6\ngoo\ncd ..\nrm -rf grep-3.6\ntar -xvf gzip-1.10.tar.xz\ncd gzip-1.10\ngoo\ncd ..\nrm -rf gzip-1.10\ntar -xvf make-4.3.tar.gz\ncd make-4.3\ngoo\ncd ..\nrm -rf make-4.3\ntar -xvf patch-2.7.6.tar.xz\ncd patch-2.7.6\ngoo\ncd ..\nrm -rf patch-2.7.6\ntar -xvf sed-4.8.tar.xz\ncd sed-4.8\ngoo\ncd ..\nrm -rf sed-4.8\ntar -xvf tar-1.34.tar.xz\ncd tar-1.34\ngoo\ncd ..\nrm -rf tar-1.34\ntar -xvf xz-5.2.5.tar.xz\ncd xz-5.2.5\ngoo\ncd ..\nrm -rf xz-5.2.5\ntar -xvf binutils-2.36.1.tar.xz\ncd binutils-2.36.1\ngoo\ni use nice -n 1 make -j4 -l2\nnice -n 1 make DESTDIR=$LFS install\ncd ../..\nrm -rf binutils-2.36.1\ntar -xvf gcc-10.2.0.tar.xz\ncd gcc-10.2.0\ngoo\ni use nice -n 1 make -j2\nnice -n 1 make DESTDIR=$LFS install\nln -sv gcc $LFS/usr/bin/cc\ncd ../..\nrm -rf gcc-10.2.0\nEntering Chroot and Building Additional Temporary Tools back to root user\n$# echo $LFS # to check\nin root:\nchown -R root:root $LFS/{usr,lib,var,etc,bin,sbin,tools} case $(uname -m) in x86_64) chown -R root:root $LFS/lib64 ;; esac mkdir -pv $LFS/{dev,proc,sys,run} mknod -m 600 $LFS/dev/console c 5 1 mknod -m 666 $LFS/dev/null c 1 3 mount -v --bind /dev $LFS/dev mount -v --bind /dev/pts $LFS/dev/pts mount -vt proc proc $LFS/proc mount -vt sysfs sysfs $LFS/sys mount -vt tmpfs tmpfs $LFS/run if [ -h $LFS/dev/shm ]; then mkdir -pv $LFS/$(readlink $LFS/dev/shm) fi chroot \u0026quot;$LFS\u0026quot; /usr/bin/env -i \\ HOME=/root \\ TERM=\u0026quot;$TERM\u0026quot; \\ PS1='(lfs chroot) \\u:\\w\\$ ' \\ PATH=/bin:/usr/bin:/sbin:/usr/sbin \\ /bin/bash --login +h  I personly use:\nchroot \u0026ldquo;$LFS\u0026rdquo; /usr/bin/env -i HOME=/root TERM=\u0026quot;$TERM\u0026rdquo; PS1=\u0026rsquo;(lfs chroot) \\u:\\w$ '\nPATH=/bin:/usr/bin:/sbin:/usr/sbin\nMAKEFLAGS=\u0026rdquo;-j4 -l2\u0026rdquo;\n/bin/bash \u0026ndash;login +h\n mkdir -pv /{boot,home,mnt,opt,srv} mkdir -pv /etc/{opt,sysconfig} mkdir -pv /lib/firmware mkdir -pv /media/{floppy,cdrom} mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src} mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man} mkdir -pv /usr/{,local/}share/{misc,terminfo,zoneinfo} mkdir -pv /usr/{,local/}share/man/man{1..8} mkdir -pv /var/{cache,local,log,mail,opt,spool} mkdir -pv /var/lib/{color,misc,locate} ln -sfv /run /var/run ln -sfv /run/lock /var/lock install -dv -m 0750 /root install -dv -m 1777 /tmp /var/tmp ln -sv /proc/self/mounts /etc/mtab echo \u0026quot;127.0.0.1 localhost $(hostname)\u0026quot; \u0026gt; /etc/hosts cat \u0026gt; /etc/passwd \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/dev/null:/bin/false daemon:x:6:6:Daemon User:/dev/null:/bin/false messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false nobody:x:99:99:Unprivileged User:/dev/null:/bin/false EOF cat \u0026gt; /etc/group \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; root:x:0: bin:x:1:daemon sys:x:2: kmem:x:3: tape:x:4: tty:x:5: daemon:x:6: floppy:x:7: disk:x:8: lp:x:9: dialout:x:10: audio:x:11: video:x:12: utmp:x:13: usb:x:14: cdrom:x:15: adm:x:16: messagebus:x:18: input:x:24: mail:x:34: kvm:x:61: wheel:x:97: nogroup:x:99: users:x:999: EOF echo \u0026quot;tester:x:$(ls -n $(tty) | cut -d\u0026quot; \u0026quot; -f3):101::/home/tester:/bin/bash\u0026quot; \u0026gt;\u0026gt; /etc/passwd echo \u0026quot;tester:x:101:\u0026quot; \u0026gt;\u0026gt; /etc/group install -o tester -d /home/tester exec /bin/bash --login +h  set # to check  touch /var/log/{btmp,lastlog,faillog,wtmp} chgrp -v utmp /var/log/lastlog chmod -v 664 /var/log/lastlog chmod -v 600 /var/log/btmp cd /sources\t# pls check if chrooted\ntar -xvf gcc-10.2.0.tar.xz\ncd gcc-10.2.0\ngoo Libstdc++\nnice -n 1 make\nnice -n 1 make install\ncd ../..\nrm -rf gcc-10.2.0\ntar -xvf gettext-0.21.tar.xz\ncd gettext-0.21\ngoo gettext-0.21\nnice -n 1 make\ncp -v gettext-tools/src/{msgfmt,msgmerge,xgettext} /usr/bin\ncd ..\nrm -rf gettext-0.21\ntar -xvf bison-3.7.5.tar.xz\ncd bison-3.7.5\ngoo bison-3.7.5\ncd ..\nrm -rf bison-3.7.5\ntar -xvf perl-5.32.1.tar.xz\ncd perl-5.32.1\ngoo perl-5.32.1\nnice -n 1 make\nnice -n 1 make install\ncd ..\nrm -rf perl-5.32.1\ntar -xvf Python-3.9.2.tar.xz\ncd Python-3.9.2\ngoo Python-3.9.2\n i use release here by --enable-optimizations\n./configure --prefix=/usr \\ --enable-shared \\ --without-ensurepip \\ --enable-optimizations  nice -n 1 make\nnice -n 1 make install\ncd ..\nrm -rf Python-3.9.2\ntar -xvf texinfo-6.7.tar.xz\ncd texinfo-6.7\ngoo texinfo-6.7\ncd ..\nrm -rf texinfo-6.7\ntar -xvf util-linux-2.36.2.tar.xz\ncd util-linux-2.36.2\ngoo util-linux-2.36.2\ncd ..\nrm -rf util-linux-2.36.2\nnow in chroot do:\nfind /usr/{lib,libexec} -name \\*.la -delete rm -rf /usr/share/{info,man,doc}/* exit\t# to back to root user after back to root user, do:\numount $LFS/dev{/pts,} umount $LFS/{sys,proc,run} strip --strip-debug $LFS/usr/lib/* strip --strip-unneeded $LFS/usr/{,s}bin/* strip --strip-unneeded $LFS/tools/bin/*  df -h\t#to check  Make sure $LFS has at least 600 MB free disk space (the source tarballs will be included in the backup archive) in the home directory of user root.\nmount backup disk first:\n$# mkdir -pv /mnt/lfsbackup\t#make /mnt/lfsbackup folder $# mount -v -t ext4 /dev/sda4 /mnt/lfsbackup\t#mount sda4 to /mnt/lfsbackup create backup:\ncd $LFS \u0026amp;\u0026amp; tar -cJpf /mnt/lfsbackup/lfs-temp-tools-10.0.tar.xz .  i use this for backup:\ncd $LFS \u0026amp;\u0026amp; tar cp . | xz -zveT4 \u0026gt; /mnt/lfsbackup/lfs-temp-tools-10.0.tar.xz  after backup, remount LFS virtual kernel file system and re-enter chroot:\nmount -v --bind /dev $LFS/dev mount -v --bind /dev/pts $LFS/dev/pts mount -vt proc proc $LFS/proc mount -vt sysfs sysfs $LFS/sys mount -vt tmpfs tmpfs $LFS/run if [ -h $LFS/dev/shm ]; then mkdir -pv $LFS/$(readlink $LFS/dev/shm) fi chroot \u0026quot;$LFS\u0026quot; /usr/bin/env -i \\ HOME=/root \\ TERM=\u0026quot;$TERM\u0026quot; \\ PS1='(lfs chroot) \\u:\\w\\$ ' \\ PATH=/bin:/usr/bin:/sbin:/usr/sbin \\ /bin/bash --login +h  I personly use:\nchroot \u0026ldquo;$LFS\u0026rdquo; /usr/bin/env -i HOME=/root TERM=\u0026quot;$TERM\u0026rdquo; PS1=\u0026rsquo;(lfs chroot) \\u:\\w$ '\nPATH=/bin:/usr/bin:/sbin:/usr/sbin\nMAKEFLAGS=\u0026rdquo;-j4 -l2\u0026rdquo;\n/bin/bash \u0026ndash;login +h\n 5. Building the LFS System 4 Installing Basic System Software first:\ncd /sources\ntar -xvf man-pages-5.10.tar.xz\ncd man-pages-5.10\nmake install\ncd ..\nrm -rf man-pages-5.10\ntar -xvf iana-etc-20210202.tar.gz\ncd iana-etc-20210202\ncp services protocols /etc\ncd ..\nrm -rf iana-etc-20210202\ntar -xvf glibc-2.33.tar.xz\ncd glibc-2.33\ngoo glibc-2.33\nnice -n 1 make\nnice -n 1 make check\ntouch /etc/ld.so.conf\nsed \u0026lsquo;/test-installation/s@$(PERL)@echo not running@\u0026rsquo; -i ../Makefile\nnice -n 1 make install\ncp -v ../nscd/nscd.conf /etc/nscd.conf mkdir -pv /var/cache/nscd\nmkdir -pv /usr/lib/locale localedef -i POSIX -f UTF-8 C.UTF-8 2\u0026gt; /dev/null || true localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8 localedef -i de_DE -f ISO-8859-1 de_DE localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro localedef -i de_DE -f UTF-8 de_DE.UTF-8 localedef -i el_GR -f ISO-8859-7 el_GR localedef -i en_GB -f UTF-8 en_GB.UTF-8 localedef -i en_HK -f ISO-8859-1 en_HK localedef -i en_PH -f ISO-8859-1 en_PH localedef -i en_US -f ISO-8859-1 en_US localedef -i en_US -f UTF-8 en_US.UTF-8 localedef -i es_MX -f ISO-8859-1 es_MX localedef -i fa_IR -f UTF-8 fa_IR localedef -i fr_FR -f ISO-8859-1 fr_FR localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro localedef -i fr_FR -f UTF-8 fr_FR.UTF-8 localedef -i it_IT -f ISO-8859-1 it_IT localedef -i it_IT -f UTF-8 it_IT.UTF-8 localedef -i ja_JP -f EUC-JP ja_JP localedef -i ja_JP -f SHIFT_JIS ja_JP.SIJS 2\u0026gt; /dev/null || true localedef -i ja_JP -f UTF-8 ja_JP.UTF-8 localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R localedef -i ru_RU -f UTF-8 ru_RU.UTF-8 localedef -i tr_TR -f UTF-8 tr_TR.UTF-8 localedef -i zh_CN -f GB18030 zh_CN.GB18030 localedef -i zh_HK -f BIG5-HKSCS zh_HK.BIG5-HKSCS\n alt, do:\nmake localedata/install-locales  cat \u0026gt; /etc/nsswitch.conf \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; # Begin /etc/nsswitch.conf passwd: files group: files shadow: files hosts: files dns networks: files protocols: files services: files ethers: files rpc: files # End /etc/nsswitch.conf EOF tar -xf ../../tzdata2021a.tar.gz ZONEINFO=/usr/share/zoneinfo mkdir -pv $ZONEINFO/{posix,right} for tz in etcetera southamerica northamerica europe africa antarctica \\ asia australasia backward; do zic -L /dev/null -d $ZONEINFO ${tz} zic -L /dev/null -d $ZONEINFO/posix ${tz} zic -L leapseconds -d $ZONEINFO/right ${tz} done cp -v zone.tab zone1970.tab iso3166.tab $ZONEINFO zic -d $ZONEINFO -p America/New_York unset ZONEINFO tzselect ln -sfv /usr/share/zoneinfo/\u0026lt;xxx\u0026gt; /etc/localtime #change the \u0026lt;xxx\u0026gt; to the selected time zone cat \u0026gt; /etc/ld.so.conf \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; # Begin /etc/ld.so.conf /usr/local/lib /opt/lib EOF cat \u0026gt;\u0026gt; /etc/ld.so.conf \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; # Add an include directory include /etc/ld.so.conf.d/*.conf EOF mkdir -pv /etc/ld.so.conf.d cd ../..\nrm -rf glibc-2.33\ntar -xvf zlib-1.2.11.tar.xz\ncd zlib-1.2.11\ngoo zlib-1.2.11\ncd ..\nrm -rf zlib-1.2.11\ntar -xvf bzip2-1.0.8.tar.gz\ncd bzip2-1.0.8\ngoo bzip2-1.0.8\ncd ..\nrm -rf bzip2-1.0.8\ntar -xvf xz-5.2.5.tar.xz\ncd xz-5.2.5\ngoo xz-5.2.5\ncd ..\nrm -rf xz-5.2.5\ntar -xvf zstd-1.4.8.tar.gz\ncd zstd-1.4.8\ngoo zstd-1.4.8\ncd ..\nrm -rf zstd-1.4.8\ntar -xvf file-5.39.tar.gz\ncd file-5.39\ngoo file-5.39\ncd ..\nrm -rf file-5.39\ntar -xvf readline-8.1.tar.gz\ncd readline-8.1\ngoo readline-8.1\ncd ..\nrm -rf readline-8.1\ntar -xvf m4-1.4.18.tar.xz\ncd m4-1.4.18\ngoo m4-1.4.18\ncd ..\nrm -rf m4-1.4.18\ntar -xvf bc-3.3.0.tar.xz\ncd bc-3.3.0\ngoo bc-3.3.0\ncd ..\nrm -rf bc-3.3.0\ntar -xvf flex-2.6.4.tar.gz\ncd flex-2.6.4\ngoo flex-2.6.4\ncd ..\nrm -rf flex-2.6.4\ntar -xvf tcl8.6.11-src.tar.gz\ncd tcl8.6.11\ngoo tcl8.6.11\ncd ../..\nrm -rf tcl8.6.11\ntar -xvf expect5.45.4.tar.gz\ncd expect5.45.4\ngoo expect5.45.4\ncd ..\nrm -rf expect5.45.4\ntar -xvf dejagnu-1.6.2.tar.gz\ncd dejagnu-1.6.2\ngoo dejagnu-1.6.2\ncd ..\nrm -rf dejagnu-1.6.2\ntar -xvf binutils-2.36.1.tar.xz\ncd binutils-2.36.1\ngoo binutils-2.36.1\nnice -n 1 make tooldir=/usr\nnice -n 1 make -k check\n Four tests named “Run property \u0026hellip;” are known to fail.\n(Currently, if you had check-DEJAGNU, check-am, check-recursive, check, check-ld or do-check error; they\u0026rsquo;re all common error to test harness, which can be ignored)\nrefer:\nhttp://lists.linuxfromscratch.org/pipermail/lfs-support/2014-October/047863.html\nhttp://lists.linuxfromscratch.org/pipermail/lfs-support/2016-August/050264.html\n nice -n 1 make tooldir=/usr install\nrm -fv /usr/lib/lib{bfd,ctf,ctf-nobfd,opcodes}.a\ncd ../..\nrm -rf binutils-2.36.1\ntar -xvf gmp-6.2.1.tar.xz\ncd gmp-6.2.1\ngoo gmp-6.2.1\ncd ..\nrm -rf gmp-6.2.1\ntar -xvf mpfr-4.1.0.tar.xz\ncd mpfr-4.1.0\ngoo mpfr-4.1.0\ncd ..\nrm -rf mpfr-4.1.0\ntar -xvf mpc-1.2.1.tar.gz\ncd mpc-1.2.1\ngoo mpc-1.2.1\ncd ..\nrm -rf mpc-1.2.1\ntar -xvf attr-2.4.48.tar.gz\ncd attr-2.4.48\ngoo attr-2.4.48\ncd ..\nrm -rf attr-2.4.48\ntar -xvf acl-2.2.53.tar.gz\ncd acl-2.2.53\ngoo acl-2.2.53\ncd ..\nrm -rf acl-2.2.53\ntar -xvf libcap-2.48.tar.xz\ncd libcap-2.48\ngoo libcap-2.48\ncd ..\nrm -rf libcap-2.48\ntar -xvf shadow-4.8.1.tar.xz\ncd shadow-4.8.1\ngoo shadow-4.8.1\npwconv grpconv sed -i 's/yes/no/' /etc/default/useradd passwd root cd ..\nrm -rf shadow-4.8.1\ntar -xvf gcc-10.2.0.tar.xz\ncd gcc-10.2.0\ngoo gcc-10.2.0\nnice -n 1 make -j1\nulimit -s 32768\nchown -Rv tester . su tester -c \u0026ldquo;PATH=$PATH make -k check\u0026rdquo;\n../contrib/test_summary\nnice -n 1 make install rm -rf /usr/lib/gcc/$(gcc -dumpmachine)/10.2.0/include-fixed/bits/\nchown -v -R root:root\n/usr/lib/gcc/*linux-gnu/10.2.0/include{,-fixed}\nln -sv ../usr/bin/cpp /lib\ninstall -v -dm755 /usr/lib/bfd-plugins ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/10.2.0/liblto_plugin.so\n/usr/lib/bfd-plugins/\necho \u0026lsquo;int main(){}\u0026rsquo; \u0026gt; dummy.c cc dummy.c -v -Wl,\u0026ndash;verbose \u0026amp;\u0026gt; dummy.log readelf -l a.out | grep \u0026lsquo;: /lib\u0026rsquo;\ngrep -o \u0026lsquo;/usr/lib.*/crt[1in].*succeeded\u0026rsquo; dummy.log\ngrep -B4 \u0026lsquo;^ /usr/include\u0026rsquo; dummy.log\ngrep \u0026lsquo;SEARCH.*/usr/lib\u0026rsquo; dummy.log |sed \u0026rsquo;s|; |\\n|g\u0026rsquo;\ngrep \u0026ldquo;/lib.*/libc.so.6 \u0026quot; dummy.log\ngrep found dummy.log\nrm -v dummy.c a.out dummy.log\nmkdir -pv /usr/share/gdb/auto-load/usr/lib mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib\ncd ../..\nrm -rf gcc-10.2.0\ntar -xvf pkg-config-0.29.2.tar.gz\ncd pkg-config-0.29.2\ngoo pkg-config-0.29.2\ncd ..\nrm -rf pkg-config-0.29.2\ntar -xvf ncurses-6.2.tar.gz\ncd ncurses-6.2\ngoo ncurses-6.2\ncd ..\nrm -rf ncurses-6.2\ntar -xvf sed-4.8.tar.xz\ncd sed-4.8\ngoo sed-4.8\ncd ..\nrm -rf sed-4.8\ntar -xvf psmisc-23.4.tar.xz\ncd psmisc-23.4\ngoo psmisc-23.4\ncd ..\nrm -rf psmisc-23.4\ntar -xvf gettext-0.21.tar.xz\ncd gettext-0.21\ngoo gettext-0.21\nnice -n 1 make\nnice -n 1 make check\nnice -n 1 make install\nchmod -v 0755 /usr/lib/preloadable_libintl.so\ncd ..\nrm -rf gettext-0.21\ntar -xvf bison-3.7.5.tar.xz\ncd bison-3.7.5\ngoo bison-3.7.5\nnice -n 1 make\nnice -n 1 make check\nnice -n 1 make install\ncd ..\nrm -rf bison-3.7.5\ntar -xvf grep-3.6.tar.xz\ncd grep-3.6\ngoo grep-3.6\ncd ..\nrm -rf grep-3.6\ntar -xvf bash-5.1.tar.gz\ncd bash-5.1\ngoo bash-5.1\nnice -n 1 make\nchown -Rv tester .\nsu tester \u0026laquo; EOF PATH=$PATH make tests \u0026lt; $(tty) EOF\nnice -n 1 make install mv -vf /usr/bin/bash /bin\nexec /bin/bash \u0026ndash;login +h\ncd ..\nrm -rf bash-5.1\ntar -xvf libtool-2.4.6.tar.xz\ncd libtool-2.4.6\ngoo libtool-2.4.6\nnice -n 1 make\nnice -n 1 make check\nnice -n 1 make install\nrm -fv /usr/lib/libltdl.a\ncd ..\nrm -rf libtool-2.4.6\ntar -xvf gdbm-1.19.tar.gz\ncd gdbm-1.19\ngoo gdbm-1.19\ncd ..\nrm -rf gdbm-1.19\ntar -xvf gperf-3.1.tar.gz\ncd gperf-3.1\ngoo gperf-3.1\ncd ..\nrm -rf gperf-3.1\ntar -xvf expat-2.2.10.tar.xz\ncd expat-2.2.10\ngoo expat-2.2.10\ncd ..\nrm -rf expat-2.2.10\ntar -xvf inetutils-2.0.tar.xz\ncd inetutils-2.0\ngoo inetutils-2.0\ncd ..\nrm -rf inetutils-2.0\ntar -xvf perl-5.32.1.tar.xz\ncd perl-5.32.1\ngoo perl-5.32.1\nnice -n 1 make\nnice -n 1 make test\nnice -n 1 make install unset BUILD_ZLIB BUILD_BZIP2\ncd ..\nrm -rf perl-5.32.1\ntar -xvf XML-Parser-2.46.tar.gz\ncd XML-Parser-2.46\ngoo XML-Parser-2.46\ncd ..\nrm -rf XML-Parser-2.46\ntar -xvf intltool-0.51.0.tar.gz\ncd intltool-0.51.0\ngoo intltool-0.51.0\ncd ..\nrm -rf intltool-0.51.0\ntar -xvf autoconf-2.71.tar.xz\ncd autoconf-2.71\ngoo autoconf-2.71\nmake check\t# currently broken by bash-5 and libtool-2.4.3 make install\ncd ..\nrm -rf autoconf-2.71\ntar -xvf automake-1.16.3.tar.xz\ncd automake-1.16.3\ngoo automake-1.16.3\nnice -n 1 make\nnice -n 1 make -j4 check\nnice -n 1 make install\ncd ..\nrm -rf automake-1.16.3\ntar -xvf kmod-28.tar.xz\ncd kmod-28\ngoo kmod-28\ncd ..\nrm -rf kmod-28\ntar -xvf elfutils-0.183.tar.bz2\ncd elfutils-0.183\ngoo elfutils-0.183\ncd ..\nrm -rf elfutils-0.183\ntar -xvf libffi-3.3.tar.gz\ncd libffi-3.3\ngoo libffi-3.3\nnice -n 1 make\nnice -n 1 make check\nnice -n 1 make install\ncd ..\nrm -rf libffi-3.3\ntar -xvf openssl-1.1.1j.tar.gz\ncd openssl-1.1.1j\ngoo openssl-1.1.1j\nnice -n 1 make\nnice -n 1 make test\nOne test 30-test_afalg.t is known to fail on some kernel configurations (it apparently assumes certain unspecified crypto options have been selected).\nsed -i \u0026lsquo;/INSTALL_LIBS/s/libcrypto.a libssl.a//\u0026rsquo; Makefile nice -n 1 make MANSUFFIX=ssl install\nmv -v /usr/share/doc/openssl /usr/share/doc/openssl-1.1.1j cp -vfr doc/* /usr/share/doc/openssl-1.1.1j\ncd ..\nrm -rf openssl-1.1.1j\ntar -xvf Python-3.9.2.tar.xz\ncd Python-3.9.2\ngoo Python-3.9.2\n i use release here by --enable-optimizations\n./configure --prefix=/usr \\ --enable-shared \\ --with-system-expat \\ --with-system-ffi \\ --with-ensurepip=yes \\ --enable-optimizations  nice -n 1 make\nnice -n 1 make install\ninstall -v -dm755 /usr/share/doc/python-3.9.2/html\ntar \u0026ndash;strip-components=1 \u0026ndash;no-same-owner \u0026ndash;no-same-permissions\n-C /usr/share/doc/python-3.9.2/html\n-xvf ../python-3.9.2-docs-html.tar.bz2\ncd ..\nrm -rf Python-3.9.2\ntar -xvf ninja-1.10.2.tar.gz\ncd ninja-1.10.2\ngoo ninja-1.10.2\ncd ..\nrm -rf ninja-1.10.2\ntar -xvf meson-0.57.1.tar.gz\ncd meson-0.57.1\ngoo meson-0.57.1\ncd ..\nrm -rf meson-0.57.1\ntar -xvf coreutils-8.32.tar.xz\ncd coreutils-8.32\ngoo coreutils-8.32\nnice -n 1 make\nnice -n 1 make NON_ROOT_USERNAME=tester check-root\necho \u0026ldquo;dummy:x:102:tester\u0026rdquo; \u0026raquo; /etc/group\nchown -Rv tester .\nsu tester -c \u0026ldquo;PATH=$PATH make RUN_EXPENSIVE_TESTS=yes check\u0026rdquo;\nThe test-getlogin test is known to fail in the LFS chroot environment.\nsed -i \u0026lsquo;/dummy/d\u0026rsquo; /etc/group\nnice -n 1 make install\nmv -v /usr/bin/{cat,chgrp,chmod,chown,cp,date,dd,df,echo} /bin mv -v /usr/bin/{false,ln,ls,mkdir,mknod,mv,pwd,rm} /bin mv -v /usr/bin/{rmdir,stty,sync,true,uname} /bin mv -v /usr/bin/chroot /usr/sbin mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8 sed -i \u0026rsquo;s/\u0026ldquo;1\u0026rdquo;/\u0026ldquo;8\u0026rdquo;/\u0026rsquo; /usr/share/man/man8/chroot.8\nmv -v /usr/bin/{head,nice,sleep,touch} /bin\ncd ..\nrm -rf coreutils-8.32\ntar -xvf check-0.15.2.tar.gz\ncd check-0.15.2\ngoo check-0.15.2\nnice -n 1 make check\nnice -n 1 make docdir=/usr/share/doc/check-0.15.2 install\ncd ..\nrm -rf check-0.15.2\ntar -xvf diffutils-3.7.tar.xz\ncd diffutils-3.7\ngoo diffutils-3.7\ncd ..\nrm -rf diffutils-3.7\ntar -xvf gawk-5.1.0.tar.xz\ncd gawk-5.1.0\ngoo gawk-5.1.0\ncd ..\nrm -rf gawk-5.1.0\ntar -xvf findutils-4.8.0.tar.xz\ncd findutils-4.8.0\ngoo findutils-4.8.0\ncd ..\nrm -rf findutils-4.8.0\ntar -xvf groff-1.22.4.tar.gz\ncd groff-1.22.4\ngoo groff-1.22.4\nChoose either one:\nPAGE=letter ./configure --prefix=/usr\t#For users in the United States PAGE=A4 ./configure --prefix=/usr\t#Elsewhere make -j1\nmake install\ncd ..\nrm -rf groff-1.22.4\ntar -xvf grub-2.04.tar.xz\ncd grub-2.04\ngoo grub-2.04\ncd ..\nrm -rf grub-2.04\ntar -xvf less-563.tar.gz\ncd less-563\ngoo less-563\ncd ..\nrm -rf less-563\ntar -xvf gzip-1.10.tar.xz\ncd gzip-1.10\ngoo gzip-1.10\ncd ..\nrm -rf gzip-1.10\ntar -xvf iproute2-5.10.0.tar.xz\ncd iproute2-5.10.0\ngoo iproute2-5.10.0\ncd ..\nrm -rf iproute2-5.10.0\ntar -xvf kbd-2.4.0.tar.xz\ncd kbd-2.4.0\ngoo kbd-2.4.0\ncd ..\nrm -rf kbd-2.4.0\ntar -xvf libpipeline-1.5.3.tar.gz\ncd libpipeline-1.5.3\ngoo libpipeline-1.5.3\ncd ..\nrm -rf libpipeline-1.5.3\ntar -xvf make-4.3.tar.gz\ncd make-4.3\ngoo make-4.3\ncd ..\nrm -rf make-4.3\ntar -xvf patch-2.7.6.tar.xz\ncd patch-2.7.6\ngoo patch-2.7.6\ncd ..\nrm -rf patch-2.7.6\ntar -xvf man-db-2.9.4.tar.xz\ncd man-db-2.9.4\ngoo man-db-2.9.4\ncd ..\nrm -rf man-db-2.9.4\ntar -xvf tar-1.34.tar.xz\ncd tar-1.34\ngoo tar-1.34\nnice -n 1 make\nnice -n 1 make check\n One test, capabilities: binary store/restore, is known to fail.\n nice -n 1 make install nice -n 1 make -C doc install-html docdir=/usr/share/doc/tar-1.34\ncd ..\nrm -rf tar-1.34\ntar -xvf texinfo-6.7.tar.xz\ncd texinfo-6.7\ngoo texinfo-6.7\ncd ..\nrm -rf texinfo-6.7\n now to install Editor\nI use vim, btw\n tar -xvf vim-8.2.2433.tar.gz\ncd vim-8.2.2433\ngoo vim-8.2.2433\nnice -n 1 make\nchown -Rv tester .\nsu tester -c \u0026ldquo;LANG=en_US.UTF-8 make -j1 test\u0026rdquo; \u0026amp;\u0026gt; vim-test.log\nnice -n 1 make install\nMany users are used to using vi instead of vim. To allow execution of vim when users habitually enter vi, create a symlink for both the binary and the man page in the provided languages:\nln -sv vim /usr/bin/vi for L in /usr/share/man/{,*/}man1/vim.1; do ln -sv vim.1 $(dirname $L)/vi.1 done ln -sv ../vim/vim82/doc /usr/share/doc/vim-8.2.2433\nConfiguring Vim:\ncat \u0026gt; /etc/vimrc \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; \u0026quot; Begin /etc/vimrc \u0026quot; Ensure defaults are set before customizing settings, not after source $VIMRUNTIME/defaults.vim let skip_defaults_vim=1 set nocompatible set backspace=2 set mouse= syntax on if (\u0026amp;term == \u0026quot;xterm\u0026quot;) || (\u0026amp;term == \u0026quot;putty\u0026quot;) set background=dark endif \u0026quot; End /etc/vimrc EOF  Documentation for other available options can be obtained by running the following command:\nvim -c ':options' By default, vim only installs spell files for the English language. To install spell files for your preferred language, download the *.spl and optionally, the *.sug files for your language and character encoding from ftp://ftp.vim.org/pub/vim/runtime/spell/ and save them to /usr/share/vim/vim82/spell/.\nTo use these spell files, some configuration in /etc/vimrc is needed, e.g.:\nset spelllang=en,ru set spell For more information, see the appropriate README file located at the URL above.\n cd ..\nrm -rf vim-8.2.2433\ntar -xvf eudev-3.2.10.tar.gz\ncd eudev-3.2.10\ngoo eudev-3.2.10\ncd ..\nrm -rf eudev-3.2.10\ntar -xvf procps-ng-3.3.17.tar.xz\ncd procps-3.3.17\ngoo procps-ng-3.3.17\ncd ..\nrm -rf procps-3.3.17\ntar -xvf util-linux-2.36.2.tar.xz\ncd util-linux-2.36.2\ngoo util-linux-2.36.2\nnice -n 1 make\nchown -Rv tester . su tester -c \u0026ldquo;make -k check\u0026rdquo;\nnice -n 1 make install\ncd ..\nrm -rf util-linux-2.36.2\ntar -xvf e2fsprogs-1.46.1.tar.gz\ncd e2fsprogs-1.46.1\ngoo e2fsprogs-1.46.1\nnice -n 1 make\nnice -n 1 make check\nnice -n 1 make install\nrm -fv /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a\ngunzip -v /usr/share/info/libext2fs.info.gz install-info \u0026ndash;dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info\nmakeinfo -o doc/com_err.info ../lib/et/com_err.texinfo install -v -m644 doc/com_err.info /usr/share/info install-info \u0026ndash;dir-file=/usr/share/info/dir /usr/share/info/com_err.info\ncd ../..\nrm -rf e2fsprogs-1.46.1\ntar -xvf sysklogd-1.5.1.tar.gz\ncd sysklogd-1.5.1\ngoo sysklogd-1.5.1\ncd ..\nrm -rf sysklogd-1.5.1\ntar -xvf sysvinit-2.98.tar.xz\ncd sysvinit-2.98\ngoo sysvinit-2.98\ncd ..\nrm -rf sysvinit-2.98\nALL BASIC SYSTEM SOFTWARE DONE\n df -h\t# check disk usage  Now stripping again to remove the debugging symbols from binaries and libraries (optional, but recommend for saving disk space):\nsave_lib=\u0026quot;ld-2.32.so libc-2.32.so libpthread-2.32.so libthread_db-1.0.so\u0026quot; cd /lib for LIB in $save_lib; do objcopy --only-keep-debug $LIB $LIB.dbg strip --strip-unneeded $LIB objcopy --add-gnu-debuglink=$LIB.dbg $LIB done save_usrlib=\u0026quot;libquadmath.so.0.0.0 libstdc++.so.6.0.28 libitm.so.1.0.0 libatomic.so.1.2.0\u0026quot; cd /usr/lib for LIB in $save_usrlib; do objcopy --only-keep-debug $LIB $LIB.dbg strip --strip-unneeded $LIB objcopy --add-gnu-debuglink=$LIB.dbg $LIB done unset LIB save_lib save_usrlib find /usr/lib -type f -name \\*.a \\ -exec strip --strip-debug {} ';' find /lib /usr/lib -type f -name \\*.so* ! -name \\*dbg \\ -exec strip --strip-unneeded {} ';' find /{bin,sbin} /usr/{bin,sbin,libexec} -type f \\ -exec strip --strip-all {} ';' A large number of files will be reported as having their file format not recognized. These warnings can be safely ignored. These warnings indicate that those files are scripts instead of binaries.\n df -h\t# check disk usage  After above tasks done, cleaning up temp and extra files:\nrm -rf /tmp/* Now log out and reenter the chroot environment with an updated chroot command. From now on, use this updated chroot command any time you need to reenter the chroot environment after exiting:\nlogout chroot \u0026quot;$LFS\u0026quot; /usr/bin/env -i \\ HOME=/root TERM=\u0026quot;$TERM\u0026quot; \\ PS1='(lfs chroot) \\u:\\w\\$ ' \\ PATH=/bin:/usr/bin:/sbin:/usr/sbin \\ /bin/bash --login  I personly use:\nchroot \u0026ldquo;$LFS\u0026rdquo; /usr/bin/env -i HOME=/root TERM=\u0026quot;$TERM\u0026rdquo; PS1=\u0026rsquo;(lfs chroot) \\u:\\w$ ' PATH=/bin:/usr/bin:/sbin:/usr/sbin\nMAKEFLAGS=\u0026rdquo;-j4 -l2\u0026rdquo;\n/bin/bash \u0026ndash;login\n Here the +h option is not used anymore, since all the previous programs have been replaced: hashing is therefore possible.\nIf the virtual kernel file systems have been unmounted, either manually or through a reboot, ensure that the virtual kernel file systems are mounted when reentering the chroot. This process was explained in Section 7.3.2, “Mounting and Populating /dev” and Section 7.3.3, “Mounting Virtual Kernel File Systems”.\nThere were several static libraries that were not suppressed earlier in the chapter in order to satisfy the regression tests in several packages. These libraries are from binutils, bzip2, e2fsprogs, flex, libtool, and zlib. If desired, remove them now:\nrm -f /usr/lib/lib{bfd,opcodes}.a rm -f /usr/lib/libctf{,-nobfd}.a rm -f /usr/lib/libbz2.a rm -f /usr/lib/lib{com_err,e2p,ext2fs,ss}.a rm -f /usr/lib/libltdl.a rm -f /usr/lib/libfl.a rm -f /usr/lib/libz.a There are also several files installed in the /usr/lib and /usr/libexec directories with a file name extension of .la. These are \u0026ldquo;libtool archive\u0026rdquo; files. As already said, they are only useful whe linking with static libraries. They are unneeded, and potentially harmful, when using dynamic shared libraries, specially when using also non-autotools build systems. To remove them, run:\nfind /usr/lib /usr/libexec -name \\*.la -delete For more information about libtool archive files, see the BLFS section \u0026ldquo;About Libtool Archive (.la) files\u0026rdquo;.\nThe compiler built in Chapter 6 and Chapter 7 is still partially installed and not needed anymore. Remove it with:\nfind /usr -depth -name $(uname -m)-lfs-linux-gnu\\* | xargs rm -rf The /tools directory can also be removed to further gain some place:\nrm -rf /tools Finally, remove the temporary \u0026lsquo;tester\u0026rsquo; user account created at the beginning of the previous chapter.\nuserdel -r tester System Configuration make sure $LFS exported:\necho $LFS export LFS=/mnt/lfs Install LFS Bootscripts in chroot:\ncd /sources tar -xvf lfs-bootscripts-20210201.tar.xz\ncd lfs-bootscripts-20210201\ngoo lfs-bootscripts-20210201\ncd ..\nrm -rf lfs-bootscripts-20210201\nManaging Devices (optional) General Network Configuration refer: http://www.linuxfromscratch.org/lfs/view/stable/chapter09/network.html\ngo back to host root user (unchroot)\nwith:\nexit then do:\nip a to check your network interfaces\nexample output:\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic noprefixroute enp0s3 valid_lft 73775sec preferred_lft 73775sec inet6 ::1/64 scope link noprefixroute valid_lft forever preferred_lft forever  The interface name of Ethernet, should be enpXsX or ethX\n To example, the Ethernet interface name is enp0s3\n In Kernotex\u0026rsquo;s Tutorial, because of using Gentoo LiveCD, he can copy the network config to LFS\nIn Arch, because of KISS, it should use netctl (not installed) to edit the network config\n enter to chroot:\nchroot \u0026quot;$LFS\u0026quot; /usr/bin/env -i \\ HOME=/root TERM=\u0026quot;$TERM\u0026quot; \\ PS1='(lfs chroot) \\u:\\w\\$ ' \\ PATH=/bin:/usr/bin:/sbin:/usr/sbin \\ /bin/bash --login  I personly use:\nchroot \u0026ldquo;$LFS\u0026rdquo; /usr/bin/env -i HOME=/root TERM=\u0026quot;$TERM\u0026rdquo; PS1=\u0026rsquo;(lfs chroot) \\u:\\w$ ' PATH=/bin:/usr/bin:/sbin:/usr/sbin\nMAKEFLAGS=\u0026rdquo;-j4 -l2\u0026rdquo;\n/bin/bash \u0026ndash;login\n then follow descriptions of chapter 9.5.1. Creating Network Interface Configuration Files in the link:\nhttp://www.linuxfromscratch.org/lfs/view/stable/chapter09/network.html\n To the example, do:\ncd /etc/sysconfig/ cat \u0026gt; ifconfig.enp0s3 \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; ONBOOT=yes IFACE=enp0s3 SERVICE=ipv4-static IP=10.0.2.15 GATEWAY=10.0.2.1 PREFIX=24 BROADCAST=10.0.2.255 EOF  DHCP is addressed in the BLFS book, so using ipv4-static first before DHCP configurations\n  go back to host root user (unchroot) again with:\nexit then do:\ncp /etc/resolv.conf $LFS/etc before copy the host\u0026rsquo;s hostname to LFS, the former should be set\nto set it, add /etc/hostname to include a single line with myhostname:\necho \u0026quot;myhostname\u0026quot; \u0026gt; /etc/hostname then copy it to LFS:\ncp /etc/hostname $LFS/etc copy the host\u0026rsquo;s hosts file to LFS:\ncp /etc/hosts $LFS/etc System Configuration chroot first:\nchroot \u0026quot;$LFS\u0026quot; /usr/bin/env -i \\ HOME=/root TERM=\u0026quot;$TERM\u0026quot; \\ PS1='(lfs chroot) \\u:\\w\\$ ' \\ PATH=/bin:/usr/bin:/sbin:/usr/sbin \\ /bin/bash --login  I personly use:\nchroot \u0026ldquo;$LFS\u0026rdquo; /usr/bin/env -i HOME=/root TERM=\u0026quot;$TERM\u0026rdquo; PS1=\u0026rsquo;(lfs chroot) \\u:\\w$ ' PATH=/bin:/usr/bin:/sbin:/usr/sbin\nMAKEFLAGS=\u0026rdquo;-j4 -l2\u0026rdquo;\n/bin/bash \u0026ndash;login\n The Bash Shell Startup Files refer: http://www.linuxfromscratch.org/lfs/view/stable/chapter09/profile.html\nfirst list available languages by doing:\nlocale -a  I use:\nen_US.utf8\n Charmaps can have a number of aliases, e.g., “ISO-8859-1” is also referred to as “iso8859-1” and “iso88591”. Some applications cannot handle the various synonyms correctly (e.g., require that “UTF-8” is written as “UTF-8”, not “utf8”), so it is safest in most cases to choose the canonical name for a particular locale. To determine the canonical name, run the following command, where \u0026lt;locale name\u0026gt; is the output given by locale -a for your preferred locale (“en_GB.iso88591” in our example).\nLC_ALL=\u0026lt;locale name\u0026gt; locale charmap For the “en_GB.iso88591” locale, the above command will print:\nISO-8859-1 This results in a final locale setting of “en_GB.ISO-8859-1”. It is important that the locale found using the heuristic above is tested prior to it being added to the Bash startup files:\nLC_ALL=\u0026lt;locale name\u0026gt; locale language LC_ALL=\u0026lt;locale name\u0026gt; locale charmap LC_ALL=\u0026lt;locale name\u0026gt; locale int_curr_symbol LC_ALL=\u0026lt;locale name\u0026gt; locale int_prefix The above commands should print the language name, the character encoding used by the locale, the local currency, and the prefix to dial before the telephone number in order to get into the country. If any of the commands above fail with a message similar to the one shown below, this means that your locale was either not installed in Section 8.8, “Glibc-2.32” or is not supported by the default installation of Glibc.\nlocale: Cannot set LC_* to default locale: No such file or directory If this happens, you should either install the desired locale using the localedef command, or consider choosing a different locale. Further instructions assume that there are no such error messages from Glibc.\nOther packages can also function incorrectly (but may not necessarily display any error messages) if the locale name does not meet their expectations. In those cases, investigating how other Linux distributions support your locale might provide some useful information.\nOnce the proper locale settings have been determined, create the /etc/profile file:\ncat \u0026gt; /etc/profile \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; # Begin /etc/profile export LANG=\u0026lt;ll\u0026gt;_\u0026lt;CC\u0026gt;.\u0026lt;charmap\u0026gt;\u0026lt;@modifiers\u0026gt; # End /etc/profile EOF  I use:\nen_US.utf8\ncat \u0026gt; /etc/profile \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; # Begin /etc/profile export LANG=en_US.UTF-8 # End /etc/profile EOF  cat /etc/profile\t＃ to check Creating the /etc/inputrc File go back to host root user (unchroot) again with:\nexit then, in host, copy /etc/inputrc to LFS:\ncp /etc/inputrc $LFS/etc  or follow the refer to make the file:\nhttp://www.linuxfromscratch.org/lfs/view/stable/chapter09/inputrc.html\n Creating the /etc/shells File  go back to host root user (unchroot) again with:\nexit  then, in host, copy /etc/shells to LFS:\ncp /etc/shells $LFS/etc  or follow the refer to make the file:\nhttp://www.linuxfromscratch.org/lfs/view/stable/chapter09/etcshells.html\n Making the LFS System Bootable Creating the /etc/fstab File  go back to host root user (unchroot) again with:\nexit  then, in host\ncopy /etc/fstab to LFS:\ncp /etc/fstab $LFS/etc  or follow the refer to make the file:\nhttp://www.linuxfromscratch.org/lfs/view/stable/chapter10/fstab.html\n copy i915 firmware loader to LFS:\ncp -avx /lib/firmware/i915/ $LFS/lib/firmware/ cp -avx /lib64/firmware/i915/ $LFS/lib64/firmware/ now, view the file to double check there should be no changes:\nby vim:\nvim $LFS/etc/fstab  for me\nthe host\u0026rsquo;s /etc/fstab like this:\n# /etc/fstab: static file system information. # # Use 'blkid' to print the universally unique identifier for a # device; this may be used with UUID= as a more robust way to name devices # that works even if disks are added and removed. See fstab(5). # # \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; # / was on /dev/sda3 during curtin installation /dev/disk/by-uuid/XXXX-XXXX-XXXX-XXXX-XXXX / ext4 defaults 0 0 # /boot was on /dev/sda2 during curtin installation /dev/disk/by-uuid/XXXX-XXXX-XXXX-XXXX-XXXX /boot ext4 defaults 0 0 # /boot/efi was on /dev/sda1 during curtin installation /dev/disk/by-uuid/XXXX-XXXX /boot/efi vfat defaults 0 0 /dev/sda4 /mnt/lfs ext4 defaults 1 1 none /dev/pts devpts defaults 0 0 if done, then :q\n The kernel - Linux-5.10.17  go back to host root user (unchroot) again with:\nexit  before chroot, copy the host\u0026rsquo;s config-X.X.X-XX-generic to $LFS/sources folder: (for Ubuntu)\ncp /boot/config-X.X.X-XX-generic $LFS/sources/.config  for Arch Linux:\nextract the host\u0026rsquo;s current kernel settings as .config to $LFS/sources folder:\nzcat /proc/config.gz \u0026gt; $LFS/sources/.config if the host use other distros, please search about the host distro\u0026rsquo;s .config, then copy it to $LFS/sources\n then chroot:\nchroot \u0026quot;$LFS\u0026quot; /usr/bin/env -i \\ HOME=/root TERM=\u0026quot;$TERM\u0026quot; \\ PS1='(lfs chroot) \\u:\\w\\$ ' \\ PATH=/bin:/usr/bin:/sbin:/usr/sbin \\ /bin/bash --login  I personly use:\nchroot \u0026ldquo;$LFS\u0026rdquo; /usr/bin/env -i HOME=/root TERM=\u0026quot;$TERM\u0026rdquo; PS1=\u0026rsquo;(lfs chroot) \\u:\\w$ ' PATH=/bin:/usr/bin:/sbin:/usr/sbin\nMAKEFLAGS=\u0026rdquo;-j4 -l2\u0026rdquo;\n/bin/bash \u0026ndash;login\n change directory to /sources:\ncd /sources now, do:\nnice -n 1 tar -Jxvf linux-5.10.17.tar.xz\ncd linux-5.10.17\ngoo linux-5.10.17\nmake mrproper\ncp ../.config .\nmake oldconfig\n if you don\u0026rsquo;t know how to choose options, just use defaults (uppercase)\n make menuconfig\n please checking with the doc or Kernotex\u0026rsquo;s video to make sure kernel configurations are correctly set\n  if → Device Drivers → Generic Driver Options → Firmware loader → Build named firmware blobs into the kernel binary setting is blank, input:\ni915/kbl_dmc_ver1_04.bin   For me, i recommend use Gzip (which already installed in LFS) to do kernel compression\nGeneral setup \u0026ndash;\u0026gt; Kernel compression mode (Gzip) \u0026mdash;\u0026gt;\n nice -n 1 make\n it may take much long time, be patient.\n  If it shows make[1]: *** [kernel/Makefile:144: kernel/kheaders_data.tar.xz] Error 127 or similar errors\ndisable CONFIG_IKHEADERS by:\nsearch and edit the line in .config file\nCONFIG_IKHEADERS=m to\n# CONFIG_IKHEADERS is not set  BTF: .tmp_vmlinux.btf: pahole (pahole) is not available Failed to generate BTF for vmlinux Try to disable CONFIG_DEBUG_INFO_BTF make: *** [Makefile:1139: vmlinux] Error 1 make: Target '__all' not remade because of errors.  if \u0026lsquo;arch/x86/boot/bzImage\u0026rsquo; missing, do:\nmake bzImage  nice -n 1 make modules_install\n If the host system has a separate /boot partition, the files copied below should go there. The easiest way to do that is to bind /boot on the host (outside chroot) to /mnt/lfs/boot before proceeding. As the root user in the host system:\nmount --bind /boot /mnt/lfs/boot  cp -iv arch/x86/boot/bzImage /boot/vmlinuz-5.10.17-lfs-10.1\ncp -iv System.map /boot/System.map-5.10.17\ncp -iv .config /boot/config-5.10.17\ninstall -d /usr/share/doc/linux-5.10.17 cp -r Documentation/* /usr/share/doc/linux-5.10.17\nchown -R 0:0 ../linux-5.10.17\ninstall -v -m755 -d /etc/modprobe.d cat \u0026gt; /etc/modprobe.d/usb.conf \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; # Begin /etc/modprobe.d/usb.conf install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true # End /etc/modprobe.d/usb.conf EOF rm ../.config\nUsing GRUB to Set Up the Boot Process follow the doc or Kernotex\u0026rsquo;s video to setup GRUB\n to copy the host\u0026rsquo;s grub config to LFS:\ngo back to host root user (unchroot) again with:\nexit then, in host, copy /boot/grub/grub.cfg to LFS:\nmkdir -p $LFS/boot/grub/ \u0026amp;\u0026amp; cp /boot/grub/grub.cfg $LFS/boot/grub/ then chroot:\nchroot \u0026quot;$LFS\u0026quot; /usr/bin/env -i \\ HOME=/root TERM=\u0026quot;$TERM\u0026quot; \\ PS1='(lfs chroot) \\u:\\w\\$ ' \\ PATH=/bin:/usr/bin:/sbin:/usr/sbin \\ /bin/bash --login  I personly use:\nchroot \u0026ldquo;$LFS\u0026rdquo; /usr/bin/env -i HOME=/root TERM=\u0026quot;$TERM\u0026rdquo; PS1=\u0026rsquo;(lfs chroot) \\u:\\w$ ' PATH=/bin:/usr/bin:/sbin:/usr/sbin\nMAKEFLAGS=\u0026rdquo;-j4 -l2\u0026rdquo;\n/bin/bash \u0026ndash;login\n   Before installing GRUB as bootloader, it\u0026rsquo;s recommend to backup\nif you\u0026rsquo;re using VM, you can use snapshot to record\n [UEFI] Install GRUB (skip if GRUB already installed on host or you are using MBR, legacy BIOS, etc)\ninstalling GRUB bootloader into /dev/sda:\ngrub-install /dev/sda GRUB config examples:\nset default=0 set timeout=5 insmod ext2 set root=(hd0,2) menuentry \u0026quot;GNU/Linux, Linux 5.10.17-lfs-10.1\u0026quot; { linux /boot/vmlinuz-5.10.17-lfs-10.1 root=/dev/sda2 ro } for /etc/grub.d/40_custom:\nmenuentry \u0026quot;GNU/Linux, Linux 5.10.17-lfs-10.1\u0026quot; { load_video insmod ext2 set root=(hd0,2) linux /boot/vmlinuz-5.10.17-lfs-10.1 root=/dev/sda4 ro }  because I use UEFI in VM, GRUB had to get config from /dev/sda2\u0026rsquo;s /boot/grub directory first by:\ncp $LFS/boot/grub/grub.cfg /boot/grub/\n  to check UUID:\nblkid  Build LFS - The End refer: http://www.linuxfromscratch.org/lfs/view/stable/chapter11/theend.html\necho 10.1 \u0026gt; /etc/lfs-release cat \u0026gt; /etc/lsb-release \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; DISTRIB_ID=\u0026quot;Linux From Scratch\u0026quot; DISTRIB_RELEASE=\u0026quot;10.1\u0026quot; DISTRIB_CODENAME=\u0026quot;\u0026lt;your name here\u0026gt;\u0026quot; DISTRIB_DESCRIPTION=\u0026quot;Linux From Scratch\u0026quot; EOF You can customize DISTRIB_ID, DISTRIB_RELEASE, DISTRIB_CODENAME, and DISTRIB_DESCRIPTION as desire\n for me:\ncat \u0026gt; /etc/lsb-release \u0026laquo; \u0026ldquo;EOF\u0026rdquo; DISTRIB_ID=\u0026quot;Linux From Scratch\u0026rdquo; DISTRIB_RELEASE=\u0026quot;10.1\u0026rdquo; DISTRIB_CODENAME=\u0026quot;amirvincent64\u0026rdquo; DISTRIB_DESCRIPTION=\u0026quot;Linux From Scratch\u0026rdquo; EOF\n cat \u0026gt; /etc/os-release \u0026lt;\u0026lt; \u0026quot;EOF\u0026quot; NAME=\u0026quot;Linux From Scratch\u0026quot; VERSION=\u0026quot;10.1\u0026quot; ID=lfs PRETTY_NAME=\u0026quot;Linux From Scratch 10.1\u0026quot; VERSION_CODENAME=\u0026quot;\u0026lt;your name here\u0026gt;\u0026quot; EOF You can customize NAME, VERSION, ID, PRETTY_NAME, and VERSION_CODENAME as desire\n for me:\ncat \u0026gt; /etc/os-release \u0026laquo; \u0026ldquo;EOF\u0026rdquo; NAME=\u0026quot;Linux From Scratch\u0026rdquo; VERSION=\u0026quot;10.1\u0026rdquo; ID=lfs PRETTY_NAME=\u0026quot;Linux From Scratch 10.1\u0026rdquo; VERSION_CODENAME=\u0026quot;amirvincent64\u0026rdquo; EOF\n Get Counted Rebooting the System Final although the kernel I built got some panic\nbut after I switch to ubuntu\u0026rsquo;s kernel, it can boot\nthat\u0026rsquo;s it. thanks for reading my notes about LFS 10.1 :-)\nPS1: Updates WIP\nPS2: Install GRUB to UEFI to the machine are in (U)EFI:\nls /sys/firmware/efi in chroot, mount the host\u0026rsquo;s boot partition to /boot/efi:\nmkdir -p /boot/efi mount -vt vfat /dev/sda1 /boot/efi Install the following BLFS packages:\nlibtasn1, p11-kit, make-ca, curl, wget.\n recommend to separate packages location between BLFS and LFS\nmake BLFS separate sources folder:\nin host:\nmkdir -p $LFS/sources/BLFS in chroot:\nmkdir -p /sources/BLFS  Install the following BLFS packages, using the instructions in the book: dosfstools, popt and pciutils.\nBuild and install FreeType if building grub with grub-mkfont enabled.\nThe BLFS FreeType instructions recommend that it be built after which and libpng have been installed.\n so it was, however, as the recommendation for \u0026ldquo;HarfBuzz\u0026rdquo; notes that one builds FreeType without it first, and then do a re-install, it wasn\u0026rsquo;t thought necessary to do the re-install.\nfor \u0026ldquo;HarfBuzz\u0026rdquo;, install these dependencies:\nPCRE, libxml2, libxslt, GLib.\n The libpng install did include the \u0026ldquo;apng\u0026rdquo; patch.\nthen follow descriptions starting from EFIVAR-37 chapter in the link:\nhttp://www.linuxfromscratch.org/hints/downloads/files/lfs-uefi.txt\n efivar currrently has a bug about lto-wrapper, to fix this, see:\nhttps://github.com/rhboot/efivar/issues/156\n Require dependencies starting from EFIVAR-37 chapter:\npopt and efivar Optional: FreeType (for grub-mkfont and unicode.pf2) unifont (for unicode.pf2)\n(WIP)\n  refer: http://www.linuxfromscratch.org/lfs/view/stable/chapter03/introduction.html (LFS 10.1 Stable) \u0026#x21a9;\u0026#xfe0e;\n refer: http://www.linuxfromscratch.org/lfs/view/stable/chapter04/chapter04.html \u0026#x21a9;\u0026#xfe0e;\n refer: http://www.linuxfromscratch.org/lfs/view/stable/part3.html \u0026#x21a9;\u0026#xfe0e;\n refer: http://www.linuxfromscratch.org/lfs/view/stable/part4.html \u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://amirvincent64.github.io/en/posts/notes-10.1-linux-from-scratch/","summary":"\u003cp\u003eMy notes about how to Linux From Scratch (10.1 Stable)\u003c/p\u003e","title":"Linux From Scratch 10.1 Notes [Alpha]"},{"content":"wowowowowowowow OwO\n","permalink":"https://amirvincent64.github.io/en/posts/2021-02-07-wow-gentoo/","summary":"\u003cp\u003e\u003cem\u003ewowowowowowowow OwO\u003c/em\u003e\u003c/p\u003e","title":"WOW! Gentoo!"},{"content":"Record the experience and experience of going to the 2021 Taipei International Animation Festival\n Translated by Google, original post here: Original  1 In the morning, my friend and I met at a breakfast shop. After having breakfast, we went out through the MRT gate and saw a crowd of people surrounding the entire venue. . We walked by the man-made wall and asked a person who was standing in line about the direction of the line. At this moment, it was almost ten o\u0026rsquo;clock in the morning, and we were guided to wait in line outside the main entrance (area 13-D). On the stalled team, friends sat down together, one of them was chasing \u0026ldquo;Goblin Slayer\u0026rdquo;, the others were playing games. During this period, I saw students ordering Foodpanda, workers eating lunch on another shelter, and some cos \u0026ldquo;Re: Life in a Different World from Zero\u0026rdquo; Rem and \u0026ldquo;Wolf Game\u0026rdquo; Iida Rentaro. It took about half an hour before someone gradually moved, and my friends began to prepare to order McDonald\u0026rsquo;s. This is the scene at the time:\n Are there too many people! ! !\n  2 (About an hour later)\nAt that time, I thought that the entrance was the venue, and when I entered:\n You have to row inside! ! !\n Not only that, but the number of people on the second floor gradually increased.\n (There are too many kapok rows, right)\n  3 (After queuing for nearly four hours)\nFinally arrived at the venue. The first thing we entered was not to grab the lucky bag immediately, but to walk around the whole venue first. These were taken while shopping:\n One Piece\n  Compared with Good Smile!\n  Lots of people\n  Hanako-kun! ! ! Hui Ye! ! !\n  I also saw a big drawing board, but unfortunately I didn’t get it\nOf course there must be ghosts, hatsune, JOJO, guinea pigs\nChildren only watch the Blade of Ghost Slayer, adults watch Guinea Pigs\n  4 I walked the whole venue and sat by the wall with my friends. I looked at them for a while and wanted to say why I went to Kapok to buy a slime bag before I started buying a lucky bag. When I came back and waited until my friend started to act, a friend who wanted to buy Pikachu went to the Mandy store first, and then went to the gashapon store, who had better luck. Then we worked in groups, one group went to Kapok, another group went to Good Smile, and I went to Lingbang. When I arrived outside the Lingbang store, I found that the queue was full\u0026hellip;\n My spell is back to the flash drive\n I sat with two friends outside the second gate, waiting for everyone to arrive. In about a few minutes, let them tell us to eat first and go to a restaurant that two people think is not bad:\n This is the invoice and easy tap\n  Miso Ramen\n  Also Miso Ramen\n When they returned to the second door, they had already bought McDonald\u0026rsquo;s and animation merchandise. So after eating McDonald\u0026rsquo;s there, I went to Taipei Station to order a drink, and then walked away.\n End This is the above notes and experience!\n","permalink":"https://amirvincent64.github.io/en/posts/2021-02-05-notes-taipei-international-comics-and-animation-festival/","summary":"\u003cp\u003e\u003cem\u003eRecord the experience and experience of going to the 2021 Taipei International Animation Festival\u003c/em\u003e\u003c/p\u003e","title":"2021 Taipei International Animation Festival-Notes"},{"content":"A tutorial about how to install and deploy your Hugo site on Github Pages\nInstall Hugo \u0026lsquo;1\u0026rsquo;  Homebrew and MacPorts, package managers for macOS, can be installed from brew.sh or macports.org respectively. See install if you are running Windows etc.\n brew install hugo # or port install hugo To verify your new install:\nhugo version Git  (Recommend for Hugo)\n Install Git Check the git if installed:\ngit --version If you’ve installed it, it shows your version of git, if not, it will prompt you to install it automatically.\nSet Git Repo There\u0026rsquo;s two ways to set:\nInit Git Repo cd `Site_Location` git init Site_Location is the location you want to place the site folder at\nClone Existing Repo cd `Site_Location` git clone `Git_Repo` Site_Location is the location you want to place the site folder at\nOptional: Push to Github Build Site Create Run the command in terminal:\ncd `Site_Location` hugo new site `Site_Name` Site_Location is the location you want to place the site folder at\nSite_Name is a site name for example\nAften then, change to the site directory:\ncd `Site_Name` Install Theme In your site directory, run the command in terminal:\ncd themes git clone `Theme_Git_URL` change the Theme_Git_URL to the URL of the theme you want to install\nAfter that, go back to site\u0026rsquo;s root directory by  cd ../\nand add the theme to the site configuration:\n Choose either one\nIf you don\u0026rsquo;t know, just output to the toml format unless you or the theme needs to use yml/yaml\n echo \u0026#39;theme = \u0026#34;`Theme_Name`\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml # to config.toml echo \u0026#39;theme = \u0026#34;`Theme_Name`\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.yml # to config.yml Alternative In your site directory, Download the Theme_Name theme using git submodule:\ngit submodule add `Theme_Git_URL` themes/`Theme_Name`  Note for non-git users: \u0026lsquo;1\u0026rsquo;\n If you do not have git installed, you can download the archive of the latest version of this theme from: https://github.com/budparr/gohugo-theme-ananke/archive/master.zip Extract that .zip file to get a “gohugo-theme-ananke-master” directory. Rename that directory to “ananke”, and move it into the “themes/” directory.   Config Compile To compile the site:\nhugo Yeah, that\u0026rsquo;s it.\n But if you have a theme, just add -t Theme_Name option\nhugo -t `Theme_Name`  Run as Server \u0026lsquo;1\u0026rsquo; Start the Hugo server:\nhugo server\rStart the Hugo server with drafts enabled:\nhugo server -D\rIt will show the output:\n | EN\r+------------------+----+\rPages | 10\rPaginator pages | 0\rNon-page files | 0\rStatic files | 3\rProcessed images | 0\rAliases | 1\rSitemaps | 1\rCleaned | 0\rTotal in 11 ms\rWatching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes}\rWatching for config changes in /Users/bep/quickstart/config.toml\rEnvironment: \u0026quot;development\u0026quot;\rServing pages from memory\rRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop\rNavigate to your new site at http://localhost:1313/.\nFeel free to edit or add new content and simply refresh in browser to see changes quickly (You might need to force refresh in webbrowser, something like Ctrl-R usually works).\nFinish And now you have finished to build your site. 😻\nAdd Post \u0026lsquo;1\u0026rsquo; You can manually create content files (for example as content/\u0026lt;CATEGORY\u0026gt;/\u0026lt;FILE\u0026gt;.\u0026lt;FORMAT\u0026gt;) and provide metadata in them, however you can use the new command to do a few things for you (like add title and date):\nhugo new posts/my-first-post.md\rEdit the newly created content file if you want, it will start with something like this:\n--- title: \u0026#34;My First Post\u0026#34; date: 2019-03-26T08:47:11+01:00 draft: true ---  Drafts do not get deployed; once you finish a post, update the header of the post to say draft: false. More info here.\n Deploy another Git Repo for Public (github.io) New Git Repo Clone github.io Repo Compile Push to github.io Repo PS: Automatic Update Script End That\u0026rsquo;s all for the tutorial, happy blogging~~~\nFor more information about Hugo or Github Pages, you can go to these both official sites:\nhttps://gohugo.io/\nhttps://pages.github.com/\n  from: https://gohugo.io/getting-started/quick-start/ \u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://amirvincent64.github.io/en/posts/2021-02-03-run-hugo-on-github/","summary":"\u003cp\u003eA tutorial about how to install and deploy your Hugo site on Github Pages\u003c/p\u003e","title":"Build Website on Github by Hugo (WIP)"},{"content":"","permalink":"https://amirvincent64.github.io/en/posts/blank/","summary":"","title":"Blank"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist  List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://amirvincent64.github.io/en/projects/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":" a Student having interests in OS, Information Science, Sociology ; loves Command Line, FOSS, Freedom.\n Skills used:\n Python3 C HTML Node.js | NPM MariaDB | MySQL | Portage | SQL Docker JSON | XML Git | Repo RaspberryPi Hugo | Markdown | HackMD Scripting | Bash Minecraft Server  Tools used:\n Gentoo | Arch | etc Vi(m) | VSCode VirtualBox | VMWare BurpSuite Nmap WireShark   Contact Me Email Feel free to contact to me at :-)\necho YW1pcnZpbmNlbnQ2NEB5YWhvby5jb20K | base64 -d ","permalink":"https://amirvincent64.github.io/en/about/","summary":"a Student having interests in OS, Information Science, Sociology ; loves Command Line, FOSS, Freedom.\n Skills used:\n Python3 C HTML Node.js | NPM MariaDB | MySQL | Portage | SQL Docker JSON | XML Git | Repo RaspberryPi Hugo | Markdown | HackMD Scripting | Bash Minecraft Server  Tools used:\n Gentoo | Arch | etc Vi(m) | VSCode VirtualBox | VMWare BurpSuite Nmap WireShark   Contact Me Email Feel free to contact to me at :-)","title":"About"}]